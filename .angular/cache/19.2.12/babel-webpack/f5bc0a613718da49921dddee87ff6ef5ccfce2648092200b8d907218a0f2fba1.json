{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, inject, forwardRef, numberAttribute, booleanAttribute, Input, ViewEncapsulation, Component, EventEmitter, ContentChildren, ViewChild, ContentChild, Output, Optional, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { find, hasClass, findSingle, focus, removeAccents, resolveFieldData } from '@primeuix/utils';\nimport * as i3 from 'primeng/api';\nimport { SharedModule, TranslationKeys, PrimeTemplate } from 'primeng/api';\nimport { BaseComponent } from 'primeng/basecomponent';\nimport { Checkbox } from 'primeng/checkbox';\nimport { IconField } from 'primeng/iconfield';\nimport { ChevronRightIcon, ChevronDownIcon, SpinnerIcon, SearchIcon } from 'primeng/icons';\nimport { InputIcon } from 'primeng/inputicon';\nimport { InputText } from 'primeng/inputtext';\nimport { Ripple } from 'primeng/ripple';\nimport { Scroller } from 'primeng/scroller';\nimport { BaseStyle } from 'primeng/base';\nimport * as i4 from 'primeng/autofocus';\nimport { AutoFocusModule } from 'primeng/autofocus';\nconst _c0 = a0 => ({\n  height: a0\n});\nconst _c1 = a0 => ({\n  \"p-tree-node-droppoint-active\": a0\n});\nconst _c2 = (a0, a1) => ({\n  $implicit: a0,\n  loading: a1\n});\nconst _c3 = (a0, a1) => ({\n  $implicit: a0,\n  partialSelected: a1,\n  class: \"p-tree-node-checkbox\"\n});\nconst _c4 = a0 => ({\n  $implicit: a0\n});\nfunction UITreeNode_Conditional_0_li_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 11);\n    i0.ɵɵlistener(\"drop\", function UITreeNode_Conditional_0_li_0_Template_li_drop_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onDropPoint($event, -1));\n    })(\"dragover\", function UITreeNode_Conditional_0_li_0_Template_li_dragover_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onDropPointDragOver($event));\n    })(\"dragenter\", function UITreeNode_Conditional_0_li_0_Template_li_dragenter_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onDropPointDragEnter($event, -1));\n    })(\"dragleave\", function UITreeNode_Conditional_0_li_0_Template_li_dragleave_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onDropPointDragLeave($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c1, ctx_r2.draghoverPrev));\n    i0.ɵɵattribute(\"aria-hidden\", true);\n  }\n}\nfunction UITreeNode_Conditional_0_ng_container_4_ng_container_1_ChevronRightIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ChevronRightIcon\", 13);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-tree-node-toggle-icon\");\n  }\n}\nfunction UITreeNode_Conditional_0_ng_container_4_ng_container_1_ChevronDownIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ChevronDownIcon\", 13);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-tree-node-toggle-icon\");\n  }\n}\nfunction UITreeNode_Conditional_0_ng_container_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, UITreeNode_Conditional_0_ng_container_4_ng_container_1_ChevronRightIcon_1_Template, 1, 1, \"ChevronRightIcon\", 12)(2, UITreeNode_Conditional_0_ng_container_4_ng_container_1_ChevronDownIcon_2_Template, 1, 1, \"ChevronDownIcon\", 12);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.node.expanded);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.node.expanded);\n  }\n}\nfunction UITreeNode_Conditional_0_ng_container_4_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"SpinnerIcon\", 13);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"styleClass\", \"pi-spin p-tree-node-toggle-icon\");\n  }\n}\nfunction UITreeNode_Conditional_0_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, UITreeNode_Conditional_0_ng_container_4_ng_container_1_Template, 3, 2, \"ng-container\", 5)(2, UITreeNode_Conditional_0_ng_container_4_ng_container_2_Template, 2, 1, \"ng-container\", 5);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.node.loading);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.loadingMode === \"icon\" && ctx_r2.node.loading);\n  }\n}\nfunction UITreeNode_Conditional_0_span_5_1_ng_template_0_Template(rf, ctx) {}\nfunction UITreeNode_Conditional_0_span_5_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, UITreeNode_Conditional_0_span_5_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction UITreeNode_Conditional_0_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtemplate(1, UITreeNode_Conditional_0_span_5_1_Template, 1, 0, null, 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.tree.togglerIconTemplate || ctx_r2.tree._togglerIconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c2, ctx_r2.node.expanded, ctx_r2.node.loading));\n  }\n}\nfunction UITreeNode_Conditional_0_p_checkbox_6_ng_container_1_ng_template_1_0_ng_template_0_Template(rf, ctx) {}\nfunction UITreeNode_Conditional_0_p_checkbox_6_ng_container_1_ng_template_1_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, UITreeNode_Conditional_0_p_checkbox_6_ng_container_1_ng_template_1_0_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction UITreeNode_Conditional_0_p_checkbox_6_ng_container_1_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, UITreeNode_Conditional_0_p_checkbox_6_ng_container_1_ng_template_1_0_Template, 1, 0, null, 15);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.tree.checkboxIconTemplate || ctx_r2.tree._checkboxIconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c3, ctx_r2.isSelected(), ctx_r2.node.partialSelected));\n  }\n}\nfunction UITreeNode_Conditional_0_p_checkbox_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, UITreeNode_Conditional_0_p_checkbox_6_ng_container_1_ng_template_1_Template, 1, 5, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction UITreeNode_Conditional_0_p_checkbox_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-checkbox\", 16);\n    i0.ɵɵlistener(\"click\", function UITreeNode_Conditional_0_p_checkbox_6_Template_p_checkbox_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      return i0.ɵɵresetView($event.preventDefault());\n    });\n    i0.ɵɵtemplate(1, UITreeNode_Conditional_0_p_checkbox_6_ng_container_1_Template, 3, 0, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngModel\", ctx_r2.isSelected())(\"binary\", true)(\"indeterminate\", ctx_r2.node.partialSelected)(\"disabled\", ctx_r2.node.selectable === false)(\"variant\", (ctx_r2.tree == null ? null : ctx_r2.tree.config.inputStyle()) === \"filled\" || (ctx_r2.tree == null ? null : ctx_r2.tree.config.inputVariant()) === \"filled\" ? \"filled\" : \"outlined\")(\"tabindex\", -1);\n    i0.ɵɵattribute(\"data-p-partialchecked\", ctx_r2.node.partialSelected);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.tree.checkboxIconTemplate || ctx_r2.tree._checkboxIconTemplate);\n  }\n}\nfunction UITreeNode_Conditional_0_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\");\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r2.getIcon());\n  }\n}\nfunction UITreeNode_Conditional_0_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r2.node.label);\n  }\n}\nfunction UITreeNode_Conditional_0_span_10_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction UITreeNode_Conditional_0_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtemplate(1, UITreeNode_Conditional_0_span_10_ng_container_1_Template, 1, 0, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.tree.getTemplateForNode(ctx_r2.node))(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c4, ctx_r2.node));\n  }\n}\nfunction UITreeNode_Conditional_0_ul_11_p_treeNode_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-treeNode\", 19);\n  }\n  if (rf & 2) {\n    const childNode_r5 = ctx.$implicit;\n    const firstChild_r6 = ctx.first;\n    const lastChild_r7 = ctx.last;\n    const index_r8 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"node\", childNode_r5)(\"parentNode\", ctx_r2.node)(\"firstChild\", firstChild_r6)(\"lastChild\", lastChild_r7)(\"index\", index_r8)(\"itemSize\", ctx_r2.itemSize)(\"level\", ctx_r2.level + 1)(\"loadingMode\", ctx_r2.loadingMode);\n  }\n}\nfunction UITreeNode_Conditional_0_ul_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 17);\n    i0.ɵɵtemplate(1, UITreeNode_Conditional_0_ul_11_p_treeNode_1_Template, 1, 8, \"p-treeNode\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"display\", ctx_r2.node.expanded ? \"flex\" : \"none\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.node.children)(\"ngForTrackBy\", ctx_r2.tree.trackBy.bind(ctx_r2));\n  }\n}\nfunction UITreeNode_Conditional_0_li_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 11);\n    i0.ɵɵlistener(\"drop\", function UITreeNode_Conditional_0_li_12_Template_li_drop_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onDropPoint($event, 1));\n    })(\"dragover\", function UITreeNode_Conditional_0_li_12_Template_li_dragover_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onDropPointDragOver($event));\n    })(\"dragenter\", function UITreeNode_Conditional_0_li_12_Template_li_dragenter_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onDropPointDragEnter($event, 1));\n    })(\"dragleave\", function UITreeNode_Conditional_0_li_12_Template_li_dragleave_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onDropPointDragLeave($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c1, ctx_r2.draghoverNext));\n    i0.ɵɵattribute(\"aria-hidden\", true);\n  }\n}\nfunction UITreeNode_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtemplate(0, UITreeNode_Conditional_0_li_0_Template, 1, 4, \"li\", 1);\n    i0.ɵɵelementStart(1, \"li\", 2);\n    i0.ɵɵlistener(\"keydown\", function UITreeNode_Conditional_0_Template_li_keydown_1_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onKeyDown($event));\n    });\n    i0.ɵɵelementStart(2, \"div\", 3);\n    i0.ɵɵlistener(\"click\", function UITreeNode_Conditional_0_Template_div_click_2_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onNodeClick($event));\n    })(\"contextmenu\", function UITreeNode_Conditional_0_Template_div_contextmenu_2_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onNodeRightClick($event));\n    })(\"dblclick\", function UITreeNode_Conditional_0_Template_div_dblclick_2_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onNodeDblClick($event));\n    })(\"touchend\", function UITreeNode_Conditional_0_Template_div_touchend_2_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onNodeTouchEnd());\n    })(\"drop\", function UITreeNode_Conditional_0_Template_div_drop_2_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onDropNode($event));\n    })(\"dragover\", function UITreeNode_Conditional_0_Template_div_dragover_2_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onDropNodeDragOver($event));\n    })(\"dragenter\", function UITreeNode_Conditional_0_Template_div_dragenter_2_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onDropNodeDragEnter($event));\n    })(\"dragleave\", function UITreeNode_Conditional_0_Template_div_dragleave_2_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onDropNodeDragLeave($event));\n    })(\"dragstart\", function UITreeNode_Conditional_0_Template_div_dragstart_2_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onDragStart($event));\n    })(\"dragend\", function UITreeNode_Conditional_0_Template_div_dragend_2_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onDragStop($event));\n    });\n    i0.ɵɵelementStart(3, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function UITreeNode_Conditional_0_Template_button_click_3_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.toggle($event));\n    });\n    i0.ɵɵtemplate(4, UITreeNode_Conditional_0_ng_container_4_Template, 3, 2, \"ng-container\", 5)(5, UITreeNode_Conditional_0_span_5_Template, 2, 5, \"span\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, UITreeNode_Conditional_0_p_checkbox_6_Template, 2, 8, \"p-checkbox\", 7)(7, UITreeNode_Conditional_0_span_7_Template, 1, 2, \"span\", 8);\n    i0.ɵɵelementStart(8, \"span\", 9);\n    i0.ɵɵtemplate(9, UITreeNode_Conditional_0_span_9_Template, 2, 1, \"span\", 5)(10, UITreeNode_Conditional_0_span_10_Template, 2, 4, \"span\", 5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(11, UITreeNode_Conditional_0_ul_11_Template, 2, 4, \"ul\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, UITreeNode_Conditional_0_li_12_Template, 1, 4, \"li\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.tree.droppableNodes);\n    i0.ɵɵadvance();\n    i0.ɵɵstyleMap(ctx_r2.node.style);\n    i0.ɵɵclassMap(ctx_r2.node.styleClass);\n    i0.ɵɵproperty(\"ngClass\", ctx_r2.nodeClass)(\"ngStyle\", i0.ɵɵpureFunction1(29, _c0, ctx_r2.itemSize + \"px\"));\n    i0.ɵɵattribute(\"aria-label\", ctx_r2.node.label)(\"aria-checked\", ctx_r2.checked)(\"aria-setsize\", ctx_r2.node.children ? ctx_r2.node.children.length : 0)(\"aria-selected\", ctx_r2.selected)(\"aria-expanded\", ctx_r2.node.expanded)(\"aria-posinset\", ctx_r2.index + 1)(\"aria-level\", ctx_r2.level + 1)(\"tabindex\", ctx_r2.index === 0 ? 0 : -1)(\"data-id\", ctx_r2.node.key);\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"padding-left\", ctx_r2.level * ctx_r2.indentation + \"rem\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r2.nodeContentClass)(\"draggable\", ctx_r2.tree.draggableNodes);\n    i0.ɵɵadvance();\n    i0.ɵɵattribute(\"data-pc-section\", \"toggler\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.tree.togglerIconTemplate && !ctx_r2.tree._togglerIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.tree.togglerIconTemplate || ctx_r2.tree._togglerIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.tree.selectionMode == \"checkbox\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.node.icon || ctx_r2.node.expandedIcon || ctx_r2.node.collapsedIcon);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.tree.getTemplateForNode(ctx_r2.node));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.tree.getTemplateForNode(ctx_r2.node));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.tree.virtualScroll && ctx_r2.node.children && ctx_r2.node.expanded);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.tree.droppableNodes && ctx_r2.lastChild);\n  }\n}\nconst _c5 = [\"filter\"];\nconst _c6 = [\"node\"];\nconst _c7 = [\"header\"];\nconst _c8 = [\"footer\"];\nconst _c9 = [\"loader\"];\nconst _c10 = [\"empty\"];\nconst _c11 = [\"togglericon\"];\nconst _c12 = [\"checkboxicon\"];\nconst _c13 = [\"loadingicon\"];\nconst _c14 = [\"filtericon\"];\nconst _c15 = [\"scroller\"];\nconst _c16 = [\"wrapper\"];\nconst _c17 = a0 => ({\n  options: a0\n});\nfunction Tree_div_1_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(\"p-tree-loading-icon pi-spin \" + ctx_r0.loadingIcon);\n  }\n}\nfunction Tree_div_1_ng_container_2_SpinnerIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SpinnerIcon\", 16);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"spin\", true)(\"styleClass\", \"p-tree-loading-icon\");\n  }\n}\nfunction Tree_div_1_ng_container_2_span_2_1_ng_template_0_Template(rf, ctx) {}\nfunction Tree_div_1_ng_container_2_span_2_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Tree_div_1_ng_container_2_span_2_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction Tree_div_1_ng_container_2_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 17);\n    i0.ɵɵtemplate(1, Tree_div_1_ng_container_2_span_2_1_Template, 1, 0, null, 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.loadingIconTemplate || ctx_r0._loadingIconTemplate);\n  }\n}\nfunction Tree_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Tree_div_1_ng_container_2_SpinnerIcon_1_Template, 1, 2, \"SpinnerIcon\", 14)(2, Tree_div_1_ng_container_2_span_2_Template, 2, 1, \"span\", 15);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.loadingIconTemplate && !ctx_r0._loadingIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.loadingIconTemplate || ctx_r0._loadingIconTemplate);\n  }\n}\nfunction Tree_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtemplate(1, Tree_div_1_i_1_Template, 1, 2, \"i\", 13)(2, Tree_div_1_ng_container_2_Template, 3, 2, \"ng-container\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.loadingIcon);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.loadingIcon);\n  }\n}\nfunction Tree_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Tree_Conditional_3_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Tree_Conditional_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Tree_Conditional_3_ng_container_0_Template, 1, 0, \"ng-container\", 18);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.filterTemplate || ctx_r0._filterTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c4, ctx_r0.filterOptions));\n  }\n}\nfunction Tree_Conditional_4_p_iconField_0_SearchIcon_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SearchIcon\", 21);\n  }\n}\nfunction Tree_Conditional_4_p_iconField_0_span_5_1_ng_template_0_Template(rf, ctx) {}\nfunction Tree_Conditional_4_p_iconField_0_span_5_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Tree_Conditional_4_p_iconField_0_span_5_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction Tree_Conditional_4_p_iconField_0_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtemplate(1, Tree_Conditional_4_p_iconField_0_span_5_1_Template, 1, 0, null, 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.filterIconTemplate || ctx_r0._filterIconTemplate);\n  }\n}\nfunction Tree_Conditional_4_p_iconField_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-iconField\")(1, \"input\", 19, 0);\n    i0.ɵɵlistener(\"keydown.enter\", function Tree_Conditional_4_p_iconField_0_Template_input_keydown_enter_1_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      return i0.ɵɵresetView($event.preventDefault());\n    })(\"input\", function Tree_Conditional_4_p_iconField_0_Template_input_input_1_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0._filter($event.target.value));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p-inputIcon\");\n    i0.ɵɵtemplate(4, Tree_Conditional_4_p_iconField_0_SearchIcon_4_Template, 1, 0, \"SearchIcon\", 20)(5, Tree_Conditional_4_p_iconField_0_span_5_Template, 2, 1, \"span\", 10);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"pAutoFocus\", ctx_r0.filterInputAutoFocus);\n    i0.ɵɵattribute(\"placeholder\", ctx_r0.filterPlaceholder);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.filterIconTemplate && !ctx_r0._filterIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.filterIconTemplate || ctx_r0._filterIconTemplate);\n  }\n}\nfunction Tree_Conditional_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Tree_Conditional_4_p_iconField_0_Template, 6, 4, \"p-iconField\", 10);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.filter);\n  }\n}\nfunction Tree_ng_container_5_p_scroller_1_ng_template_2_ul_0_p_treeNode_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-treeNode\", 27, 3);\n  }\n  if (rf & 2) {\n    const rowNode_r4 = ctx.$implicit;\n    const firstChild_r5 = ctx.first;\n    const lastChild_r6 = ctx.last;\n    const index_r7 = ctx.index;\n    const scrollerOptions_r8 = i0.ɵɵnextContext(2).options;\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"level\", rowNode_r4.level)(\"rowNode\", rowNode_r4)(\"node\", rowNode_r4.node)(\"parentNode\", rowNode_r4.parent)(\"firstChild\", firstChild_r5)(\"lastChild\", lastChild_r6)(\"index\", ctx_r0.getIndex(scrollerOptions_r8, index_r7))(\"itemSize\", scrollerOptions_r8.itemSize)(\"indentation\", ctx_r0.indentation)(\"loadingMode\", ctx_r0.loadingMode);\n  }\n}\nfunction Tree_ng_container_5_p_scroller_1_ng_template_2_ul_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 25);\n    i0.ɵɵtemplate(1, Tree_ng_container_5_p_scroller_1_ng_template_2_ul_0_p_treeNode_1_Template, 2, 10, \"p-treeNode\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    const items_r10 = ctx_r8.$implicit;\n    const scrollerOptions_r8 = ctx_r8.options;\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleMap(scrollerOptions_r8.contentStyle);\n    i0.ɵɵproperty(\"ngClass\", scrollerOptions_r8.contentStyleClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel)(\"aria-labelledby\", ctx_r0.ariaLabelledBy);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", items_r10)(\"ngForTrackBy\", ctx_r0.trackBy);\n  }\n}\nfunction Tree_ng_container_5_p_scroller_1_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Tree_ng_container_5_p_scroller_1_ng_template_2_ul_0_Template, 2, 7, \"ul\", 24);\n  }\n  if (rf & 2) {\n    const items_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngIf\", items_r10);\n  }\n}\nfunction Tree_ng_container_5_p_scroller_1_ng_container_4_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Tree_ng_container_5_p_scroller_1_ng_container_4_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Tree_ng_container_5_p_scroller_1_ng_container_4_ng_template_1_ng_container_0_Template, 1, 0, \"ng-container\", 18);\n  }\n  if (rf & 2) {\n    const scrollerOptions_r11 = ctx.options;\n    const ctx_r0 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.loaderTemplate || ctx_r0._loaderTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c17, scrollerOptions_r11));\n  }\n}\nfunction Tree_ng_container_5_p_scroller_1_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Tree_ng_container_5_p_scroller_1_ng_container_4_ng_template_1_Template, 1, 4, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction Tree_ng_container_5_p_scroller_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-scroller\", 23, 1);\n    i0.ɵɵlistener(\"onScroll\", function Tree_ng_container_5_p_scroller_1_Template_p_scroller_onScroll_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onScroll.emit($event));\n    })(\"onScrollIndexChange\", function Tree_ng_container_5_p_scroller_1_Template_p_scroller_onScrollIndexChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onScrollIndexChange.emit($event));\n    })(\"onLazyLoad\", function Tree_ng_container_5_p_scroller_1_Template_p_scroller_onLazyLoad_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onLazyLoad.emit($event));\n    });\n    i0.ɵɵtemplate(2, Tree_ng_container_5_p_scroller_1_ng_template_2_Template, 1, 1, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor)(4, Tree_ng_container_5_p_scroller_1_ng_container_4_Template, 3, 0, \"ng-container\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction1(9, _c0, ctx_r0.scrollHeight !== \"flex\" ? ctx_r0.scrollHeight : undefined));\n    i0.ɵɵproperty(\"items\", ctx_r0.serializedValue)(\"tabindex\", -1)(\"scrollHeight\", ctx_r0.scrollHeight !== \"flex\" ? undefined : \"100%\")(\"itemSize\", ctx_r0.virtualScrollItemSize || ctx_r0._virtualNodeHeight)(\"lazy\", ctx_r0.lazy)(\"options\", ctx_r0.virtualScrollOptions);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.loaderTemplate || ctx_r0._loaderTemplate);\n  }\n}\nfunction Tree_ng_container_5_ng_container_2_ul_3_p_treeNode_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-treeNode\", 32);\n  }\n  if (rf & 2) {\n    const node_r12 = ctx.$implicit;\n    const firstChild_r13 = ctx.first;\n    const lastChild_r14 = ctx.last;\n    const index_r15 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"node\", node_r12)(\"firstChild\", firstChild_r13)(\"lastChild\", lastChild_r14)(\"index\", index_r15)(\"level\", 0)(\"loadingMode\", ctx_r0.loadingMode);\n  }\n}\nfunction Tree_ng_container_5_ng_container_2_ul_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 30);\n    i0.ɵɵtemplate(1, Tree_ng_container_5_ng_container_2_ul_3_p_treeNode_1_Template, 1, 6, \"p-treeNode\", 31);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel)(\"aria-labelledby\", ctx_r0.ariaLabelledBy);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.getRootNode())(\"ngForTrackBy\", ctx_r0.trackBy.bind(ctx_r0));\n  }\n}\nfunction Tree_ng_container_5_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 28, 5);\n    i0.ɵɵtemplate(3, Tree_ng_container_5_ng_container_2_ul_3_Template, 2, 4, \"ul\", 29);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"max-height\", ctx_r0.scrollHeight);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.getRootNode());\n  }\n}\nfunction Tree_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Tree_ng_container_5_p_scroller_1_Template, 5, 11, \"p-scroller\", 22)(2, Tree_ng_container_5_ng_container_2_Template, 4, 3, \"ng-container\", 10);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.virtualScroll);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.virtualScroll);\n  }\n}\nfunction Tree_div_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.emptyMessageLabel, \" \");\n  }\n}\nfunction Tree_div_6_2_ng_template_0_Template(rf, ctx) {}\nfunction Tree_div_6_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Tree_div_6_2_ng_template_0_Template, 0, 0, \"ng-template\", null, 6, i0.ɵɵtemplateRefExtractor);\n  }\n}\nfunction Tree_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33);\n    i0.ɵɵtemplate(1, Tree_div_6_ng_container_1_Template, 2, 1, \"ng-container\", 34)(2, Tree_div_6_2_Template, 2, 0, null, 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.emptyMessageTemplate && !ctx_r0._emptyMessageTemplate)(\"ngIfElse\", ctx_r0.emptyFilter);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.emptyMessageTemplate || ctx_r0._emptyMessageTemplate);\n  }\n}\nfunction Tree_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst theme = ({\n  dt\n}) => `\n.p-tree {\n    background: ${dt('tree.background')};\n    color: ${dt('tree.color')};\n    padding: ${dt('tree.padding')};\n}\n\n.p-tree-root-children,\n.p-tree-node-children {\n    display: flex;\n    list-style-type: none;\n    flex-direction: column;\n    margin: 0;\n    gap: ${dt('tree.gap')};\n}\n\n.p-tree-root-children {\n    padding: 0;\n    padding-block-start: ${dt('tree.gap')};\n}\n\n.p-tree-node-children {\n    padding-block-start: ${dt('tree.gap')};\n    padding-inline-start: ${dt('tree.indent')};\n}\n\n.p-tree-node {\n    padding: 0;\n    outline: 0 none;\n}\n\n.p-tree-node-content {\n    border-radius: ${dt('tree.node.border.radius')};\n    padding: ${dt('tree.node.padding')};\n    display: flex;\n    align-items: center;\n    outline-color: transparent;\n    color: ${dt('tree.node.color')};\n    gap: ${dt('tree.node.gap')};\n    transition: background ${dt('tree.transition.duration')}, color ${dt('tree.transition.duration')}, outline-color ${dt('tree.transition.duration')}, box-shadow ${dt('tree.transition.duration')};\n}\n\n.p-tree-node:focus-visible > .p-tree-node-content {\n    box-shadow: ${dt('tree.node.focus.ring.shadow')};\n    outline: ${dt('tree.node.focus.ring.width')} ${dt('tree.node.focus.ring.style')} ${dt('tree.node.focus.ring.color')};\n    outline-offset: ${dt('tree.node.focus.ring.offset')};\n}\n\n.p-tree-node-content.p-tree-node-selectable:not(.p-tree-node-selected):hover {\n    background: ${dt('tree.node.hover.background')};\n    color: ${dt('tree.node.hover.color')};\n}\n\n.p-tree-node-content.p-tree-node-selectable:not(.p-tree-node-selected):hover .p-tree-node-icon {\n    color: ${dt('tree.node.icon.hover.color')};\n}\n\n.p-tree-node-content.p-tree-node-selected {\n    background: ${dt('tree.node.selected.background')};\n    color: ${dt('tree.node.selected.color')};\n}\n\n.p-tree-node-content.p-tree-node-selected .p-tree-node-toggle-button {\n    color: inherit;\n}\n\n.p-tree-node-toggle-button {\n    cursor: pointer;\n    user-select: none;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    position: relative;\n    flex-shrink: 0;\n    width: ${dt('tree.node.toggle.button.size')};\n    height: ${dt('tree.node.toggle.button.size')};\n    color: ${dt('tree.node.toggle.button.color')};\n    border: 0 none;\n    background: transparent;\n    border-radius: ${dt('tree.node.toggle.button.border.radius')};\n    transition: background ${dt('tree.transition.duration')}, color ${dt('tree.transition.duration')}, border-color ${dt('tree.transition.duration')}, outline-color ${dt('tree.transition.duration')}, box-shadow ${dt('tree.transition.duration')};\n    outline-color: transparent;\n    padding: 0;\n}\n\n.p-tree-node-toggle-button:enabled:hover {\n    background: ${dt('tree.node.toggle.button.hover.background')};\n    color: ${dt('tree.node.toggle.button.hover.color')};\n}\n\n.p-tree-node-content.p-tree-node-selected .p-tree-node-toggle-button:hover {\n    background: ${dt('tree.node.toggle.button.selected.hover.background')};\n    color: ${dt('tree.node.toggle.button.selected.hover.color')};\n}\n\n.p-tree-root {\n    overflow: auto;\n}\n\n.p-tree-node-selectable {\n    cursor: pointer;\n    user-select: none;\n}\n\n.p-tree-node-leaf > .p-tree-node-content .p-tree-node-toggle-button {\n    visibility: hidden;\n}\n\n.p-tree-node-icon {\n    color: ${dt('tree.node.icon.color')};\n    transition: color ${dt('tree.transition.duration')};\n}\n\n.p-tree-node-content.p-tree-node-selected .p-tree-node-icon {\n    color: ${dt('tree.node.icon.selected.color')};\n}\n\n.p-tree-filter-input {\n    width: 100%;\n}\n\n.p-tree-loading {\n    position: relative;\n    height: 100%;\n}\n\n.p-tree-loading-icon {\n    font-size: ${dt('tree.loading.icon.size')};\n    width: ${dt('tree.loading.icon.size')};\n    height: ${dt('tree.loading.icon.size')};\n}\n\n.p-tree .p-tree-mask {\n    position: absolute;\n    z-index: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.p-tree-flex-scrollable {\n    display: flex;\n    flex: 1;\n    height: 100%;\n    flex-direction: column;\n}\n\n.p-tree-flex-scrollable .p-tree-root {\n    flex: 1;\n}\n\n/* For PrimeNG */\n.p-tree .p-tree-node-droppoint {\n    height: 4px;\n    list-style-type: none;\n}\n\n.p-tree .p-tree-node-droppoint-active {\n    border: 0 none;\n    background-color: ${dt('primary.color')};\n}\n\n.p-tree-node-content.p-tree-node-dragover {\n    background: ${dt('tree.node.hover.background')};\n    color: ${dt('tree.node.hover.color')};\n}\n\n.p-tree-node-content.p-tree-node-dragover .p-tree-node-icon {\n    color: ${dt('tree.node.icon.hover.color')};\n}\n\n.p-tree-horizontal {\n    width: auto;\n    padding-inline-start: 0;\n    padding-inline-end: 0;\n    overflow: auto;\n}\n\n.p-tree.p-tree-horizontal table,\n.p-tree.p-tree-horizontal tr,\n.p-tree.p-tree-horizontal td {\n    border-collapse: collapse;\n    margin: 0;\n    padding: 0;\n    vertical-align: middle;\n}\n\n.p-tree-horizontal .p-tree-node-content {\n    font-weight: normal;\n    padding: 0.4em 1em 0.4em 0.2em;\n    display: flex;\n    align-items: center;\n}\n\n.p-tree-horizontal .p-tree-node-parent .p-tree-node-content {\n    font-weight: normal;\n    white-space: nowrap;\n}\n\n.p-tree.p-tree-horizontal .p-tree-node.p-tree-node-leaf,\n.p-tree.p-tree-horizontal .p-tree-node.p-tree-node-collapsed {\n    padding-inline-end: 0;\n}\n\n.p-tree.p-tree-horizontal .p-tree-node-children {\n    padding: 0;\n    margin: 0;\n}\n\n.p-tree.p-tree-horizontal .p-tree-node-connector {\n    width: 1px;\n}\n\n.p-tree.p-tree-horizontal .p-tree-node-connector-table {\n    height: 100%;\n    width: 1px;\n}\n\n.p-tree.p-tree-horizontal table {\n    height: 0;\n}\n`;\nconst classes = {\n  root: ({\n    instance\n  }) => ({\n    'p-tree p-component': true,\n    'p-tree-selectable': instance.selectionMode != null,\n    'p-tree-loading': instance.loading,\n    'p-tree-flex-scrollable': instance.scrollHeight === 'flex',\n    'p-tree-node-dragover': instance.dragHover\n  }),\n  mask: 'p-tree-mask p-overlay-mask',\n  loadingIcon: 'p-tree-loading-icon',\n  pcFilterInput: 'p-tree-filter-input',\n  wrapper: 'p-tree-root',\n  //TODO: discuss\n  rootChildren: 'p-tree-root-children',\n  node: ({\n    instance\n  }) => ({\n    'p-tree-node': true,\n    'p-tree-node-leaf': instance.isLeaf()\n  }),\n  nodeContent: ({\n    instance\n  }) => ({\n    'p-tree-node-content': true,\n    [instance.styleClass]: !!instance.styleClass,\n    'p-tree-node-selectable': instance.selectable,\n    'p-tree-node-dragover': instance.draghoverNode,\n    'p-tree-node-selected': instance.selectionMode === 'checkbox' && instance.tree.highlightOnSelect ? instance.checked : instance.selected\n  }),\n  nodeToggleButton: 'p-tree-node-toggle-button',\n  nodeToggleIcon: 'p-tree-node-toggle-icon',\n  nodeCheckbox: 'p-tree-node-checkbox',\n  nodeIcon: 'p-tree-node-icon',\n  nodeLabel: 'p-tree-node-label',\n  nodeChildren: 'p-tree-node-children'\n};\nclass TreeStyle extends BaseStyle {\n  name = 'tree';\n  theme = theme;\n  classes = classes;\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵTreeStyle_BaseFactory;\n    return function TreeStyle_Factory(__ngFactoryType__) {\n      return (ɵTreeStyle_BaseFactory || (ɵTreeStyle_BaseFactory = i0.ɵɵgetInheritedFactory(TreeStyle)))(__ngFactoryType__ || TreeStyle);\n    };\n  })();\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TreeStyle,\n    factory: TreeStyle.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeStyle, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n *\n * Tree is used to display hierarchical data.\n *\n * [Live Demo](https://www.primeng.org/tree/)\n *\n * @module treestyle\n *\n */\nvar TreeClasses;\n(function (TreeClasses) {\n  /**\n   * Class name of the root element\n   */\n  TreeClasses[\"root\"] = \"p-tree\";\n  /**\n   * Class name of the mask element\n   */\n  TreeClasses[\"mask\"] = \"p-tree-mask\";\n  /**\n   * Class name of the loading icon element\n   */\n  TreeClasses[\"loadingIcon\"] = \"p-tree-loading-icon\";\n  /**\n   * Class name of the filter input element\n   */\n  TreeClasses[\"pcFilterInput\"] = \"p-tree-filter-input\";\n  /**\n   * Class name of the wrapper element\n   */\n  TreeClasses[\"wrapper\"] = \"p-tree-root\";\n  /**\n   * Class name of the root children element\n   */\n  TreeClasses[\"rootChildren\"] = \"p-tree-root-children\";\n  /**\n   * Class name of the node element\n   */\n  TreeClasses[\"node\"] = \"p-tree-node\";\n  /**\n   * Class name of the node content element\n   */\n  TreeClasses[\"nodeContent\"] = \"p-tree-node-content\";\n  /**\n   * Class name of the node toggle button element\n   */\n  TreeClasses[\"nodeToggleButton\"] = \"p-tree-node-toggle-button\";\n  /**\n   * Class name of the node toggle icon element\n   */\n  TreeClasses[\"nodeToggleIcon\"] = \"p-tree-node-toggle-icon\";\n  /**\n   * Class name of the node checkbox element\n   */\n  TreeClasses[\"nodeCheckbox\"] = \"p-tree-node-checkbox\";\n  /**\n   * Class name of the node icon element\n   */\n  TreeClasses[\"nodeIcon\"] = \"p-tree-node-icon\";\n  /**\n   * Class name of the node label element\n   */\n  TreeClasses[\"nodeLabel\"] = \"p-tree-node-label\";\n  /**\n   * Class name of the node children element\n   */\n  TreeClasses[\"nodeChildren\"] = \"p-tree-node-children\";\n})(TreeClasses || (TreeClasses = {}));\nclass UITreeNode extends BaseComponent {\n  static ICON_CLASS = 'p-tree-node-icon ';\n  rowNode;\n  node;\n  parentNode;\n  root;\n  index;\n  firstChild;\n  lastChild;\n  level;\n  indentation;\n  itemSize;\n  loadingMode;\n  tree = inject(forwardRef(() => Tree));\n  timeout;\n  draghoverPrev;\n  draghoverNext;\n  draghoverNode;\n  get selected() {\n    return this.tree.selectionMode === 'single' || this.tree.selectionMode === 'multiple' ? this.isSelected() : undefined;\n  }\n  get checked() {\n    return this.tree.selectionMode === 'checkbox' ? this.isSelected() : undefined;\n  }\n  get nodeClass() {\n    return this.tree._componentStyle.classes.node({\n      instance: this\n    });\n  }\n  get nodeContentClass() {\n    return this.tree._componentStyle.classes.nodeContent({\n      instance: this\n    });\n  }\n  get selectable() {\n    return this.node.selectable === false ? false : this.tree.selectionMode != null;\n  }\n  ngOnInit() {\n    super.ngOnInit();\n    this.node.parent = this.parentNode;\n    const nativeElement = this.tree.el.nativeElement;\n    const pDialogWrapper = nativeElement.closest('p-dialog');\n    if (this.parentNode && !pDialogWrapper) {\n      this.setAllNodesTabIndexes();\n      this.tree.syncNodeOption(this.node, this.tree.value, 'parent', this.tree.getNodeWithKey(this.parentNode.key, this.tree.value));\n    }\n  }\n  getIcon() {\n    let icon;\n    if (this.node.icon) icon = this.node.icon;else icon = this.node.expanded && this.node.children && this.node.children?.length ? this.node.expandedIcon : this.node.collapsedIcon;\n    return UITreeNode.ICON_CLASS + ' ' + icon + ' p-tree-node-icon';\n  }\n  isLeaf() {\n    return this.tree.isNodeLeaf(this.node);\n  }\n  toggle(event) {\n    if (this.node.expanded) this.collapse(event);else this.expand(event);\n    event.stopPropagation();\n  }\n  expand(event) {\n    this.node.expanded = true;\n    if (this.tree.virtualScroll) {\n      this.tree.updateSerializedValue();\n      this.focusVirtualNode();\n    }\n    this.tree.onNodeExpand.emit({\n      originalEvent: event,\n      node: this.node\n    });\n  }\n  collapse(event) {\n    this.node.expanded = false;\n    if (this.tree.virtualScroll) {\n      this.tree.updateSerializedValue();\n      this.focusVirtualNode();\n    }\n    this.tree.onNodeCollapse.emit({\n      originalEvent: event,\n      node: this.node\n    });\n  }\n  onNodeClick(event) {\n    this.tree.onNodeClick(event, this.node);\n  }\n  onNodeKeydown(event) {\n    if (event.key === 'Enter') {\n      this.tree.onNodeClick(event, this.node);\n    }\n  }\n  onNodeTouchEnd() {\n    this.tree.onNodeTouchEnd();\n  }\n  onNodeRightClick(event) {\n    this.tree.onNodeRightClick(event, this.node);\n  }\n  onNodeDblClick(event) {\n    this.tree.onNodeDblClick(event, this.node);\n  }\n  isSelected() {\n    return this.tree.isSelected(this.node);\n  }\n  isSameNode(event) {\n    return event.currentTarget && (event.currentTarget.isSameNode(event.target) || event.currentTarget.isSameNode(event.target.closest('[role=\"treeitem\"]')));\n  }\n  onDropPoint(event, position) {\n    event.preventDefault();\n    let dragNode = this.tree.dragNode;\n    let dragNodeIndex = this.tree.dragNodeIndex;\n    let dragNodeScope = this.tree.dragNodeScope;\n    let isValidDropPointIndex = this.tree.dragNodeTree === this.tree ? position === 1 || dragNodeIndex !== this.index - 1 : true;\n    if (this.tree.allowDrop(dragNode, this.node, dragNodeScope) && isValidDropPointIndex) {\n      let dropParams = {\n        ...this.createDropPointEventMetadata(position)\n      };\n      if (this.tree.validateDrop) {\n        this.tree.onNodeDrop.emit({\n          originalEvent: event,\n          dragNode: dragNode,\n          dropNode: this.node,\n          index: this.index,\n          accept: () => {\n            this.processPointDrop(dropParams);\n          }\n        });\n      } else {\n        this.processPointDrop(dropParams);\n        this.tree.onNodeDrop.emit({\n          originalEvent: event,\n          dragNode: dragNode,\n          dropNode: this.node,\n          index: this.index\n        });\n      }\n    }\n    this.draghoverPrev = false;\n    this.draghoverNext = false;\n  }\n  processPointDrop(event) {\n    let newNodeList = event.dropNode.parent ? event.dropNode.parent.children : this.tree.value;\n    event.dragNodeSubNodes.splice(event.dragNodeIndex, 1);\n    let dropIndex = this.index;\n    if (event.position < 0) {\n      dropIndex = event.dragNodeSubNodes === newNodeList ? event.dragNodeIndex > event.index ? event.index : event.index - 1 : event.index;\n      newNodeList.splice(dropIndex, 0, event.dragNode);\n    } else {\n      dropIndex = newNodeList.length;\n      newNodeList.push(event.dragNode);\n    }\n    this.tree.dragDropService.stopDrag({\n      node: event.dragNode,\n      subNodes: event.dropNode.parent ? event.dropNode.parent.children : this.tree.value,\n      index: event.dragNodeIndex\n    });\n  }\n  createDropPointEventMetadata(position) {\n    return {\n      dragNode: this.tree.dragNode,\n      dragNodeIndex: this.tree.dragNodeIndex,\n      dragNodeSubNodes: this.tree.dragNodeSubNodes,\n      dropNode: this.node,\n      index: this.index,\n      position: position\n    };\n  }\n  onDropPointDragOver(event) {\n    event.dataTransfer.dropEffect = 'move';\n    event.preventDefault();\n  }\n  onDropPointDragEnter(event, position) {\n    if (this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n      if (position < 0) this.draghoverPrev = true;else this.draghoverNext = true;\n    }\n  }\n  onDropPointDragLeave(event) {\n    this.draghoverPrev = false;\n    this.draghoverNext = false;\n  }\n  onDragStart(event) {\n    if (this.tree.draggableNodes && this.node.draggable !== false) {\n      event.dataTransfer.setData('text', 'data');\n      this.tree.dragDropService.startDrag({\n        tree: this,\n        node: this.node,\n        subNodes: this.node?.parent ? this.node.parent.children : this.tree.value,\n        index: this.index,\n        scope: this.tree.draggableScope\n      });\n    } else {\n      event.preventDefault();\n    }\n  }\n  onDragStop(event) {\n    this.tree.dragDropService.stopDrag({\n      node: this.node,\n      subNodes: this.node?.parent ? this.node.parent.children : this.tree.value,\n      index: this.index\n    });\n  }\n  onDropNodeDragOver(event) {\n    event.dataTransfer.dropEffect = 'move';\n    if (this.tree.droppableNodes) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n  onDropNode(event) {\n    if (this.tree.droppableNodes && this.node?.droppable !== false) {\n      let dragNode = this.tree.dragNode;\n      if (this.tree.allowDrop(dragNode, this.node, this.tree.dragNodeScope)) {\n        let dropParams = {\n          ...this.createDropNodeEventMetadata()\n        };\n        if (this.tree.validateDrop) {\n          this.tree.onNodeDrop.emit({\n            originalEvent: event,\n            dragNode: dragNode,\n            dropNode: this.node,\n            index: this.index,\n            accept: () => {\n              this.processNodeDrop(dropParams);\n            }\n          });\n        } else {\n          this.processNodeDrop(dropParams);\n          this.tree.onNodeDrop.emit({\n            originalEvent: event,\n            dragNode: dragNode,\n            dropNode: this.node,\n            index: this.index\n          });\n        }\n      }\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    this.draghoverNode = false;\n  }\n  createDropNodeEventMetadata() {\n    return {\n      dragNode: this.tree.dragNode,\n      dragNodeIndex: this.tree.dragNodeIndex,\n      dragNodeSubNodes: this.tree.dragNodeSubNodes,\n      dropNode: this.node\n    };\n  }\n  processNodeDrop(event) {\n    let dragNodeIndex = event.dragNodeIndex;\n    event.dragNodeSubNodes.splice(dragNodeIndex, 1);\n    if (event.dropNode.children) event.dropNode.children.push(event.dragNode);else event.dropNode.children = [event.dragNode];\n    this.tree.dragDropService.stopDrag({\n      node: event.dragNode,\n      subNodes: event.dropNode.parent ? event.dropNode.parent.children : this.tree.value,\n      index: dragNodeIndex\n    });\n  }\n  onDropNodeDragEnter(event) {\n    if (this.tree.droppableNodes && this.node?.droppable !== false && this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n      this.draghoverNode = true;\n    }\n  }\n  onDropNodeDragLeave(event) {\n    if (this.tree.droppableNodes) {\n      let rect = event.currentTarget.getBoundingClientRect();\n      if (event.x > rect.left + rect.width || event.x < rect.left || event.y >= Math.floor(rect.top + rect.height) || event.y < rect.top) {\n        this.draghoverNode = false;\n      }\n    }\n  }\n  onKeyDown(event) {\n    if (!this.isSameNode(event) || this.tree.contextMenu && this.tree.contextMenu.containerViewChild?.nativeElement.style.display === 'block') {\n      return;\n    }\n    switch (event.code) {\n      //down arrow\n      case 'ArrowDown':\n        this.onArrowDown(event);\n        break;\n      //up arrow\n      case 'ArrowUp':\n        this.onArrowUp(event);\n        break;\n      //right arrow\n      case 'ArrowRight':\n        this.onArrowRight(event);\n        break;\n      //left arrow\n      case 'ArrowLeft':\n        this.onArrowLeft(event);\n        break;\n      //enter\n      case 'Enter':\n      case 'Space':\n      case 'NumpadEnter':\n        this.onEnter(event);\n        break;\n      //tab\n      case 'Tab':\n        this.setAllNodesTabIndexes();\n        break;\n      default:\n        //no op\n        break;\n    }\n  }\n  onArrowUp(event) {\n    const nodeElement = event.target.getAttribute('data-pc-section') === 'toggler' ? event.target.closest('[role=\"treeitem\"]') : event.target.parentElement;\n    if (nodeElement.previousElementSibling) {\n      this.focusRowChange(nodeElement, nodeElement.previousElementSibling, this.findLastVisibleDescendant(nodeElement.previousElementSibling));\n    } else {\n      let parentNodeElement = this.getParentNodeElement(nodeElement);\n      if (parentNodeElement) {\n        this.focusRowChange(nodeElement, parentNodeElement);\n      }\n    }\n    event.preventDefault();\n  }\n  onArrowDown(event) {\n    const nodeElement = event.target.getAttribute('data-pc-section') === 'toggler' ? event.target.closest('[role=\"treeitem\"]') : event.target;\n    const listElement = nodeElement.children[1];\n    if (listElement && listElement.children.length > 0) {\n      this.focusRowChange(nodeElement, listElement.children[0]);\n    } else {\n      if (nodeElement.parentElement.nextElementSibling) {\n        this.focusRowChange(nodeElement, nodeElement.parentElement.nextElementSibling);\n      } else {\n        let nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement.parentElement);\n        if (nextSiblingAncestor) {\n          this.focusRowChange(nodeElement, nextSiblingAncestor);\n        }\n      }\n    }\n    event.preventDefault();\n  }\n  onArrowRight(event) {\n    if (!this.node?.expanded && !this.tree.isNodeLeaf(this.node)) {\n      this.expand(event);\n      event.currentTarget.tabIndex = -1;\n      setTimeout(() => {\n        this.onArrowDown(event);\n      }, 1);\n    }\n    event.preventDefault();\n  }\n  onArrowLeft(event) {\n    const nodeElement = event.target.getAttribute('data-pc-section') === 'toggler' ? event.target.closest('[role=\"treeitem\"]') : event.target;\n    if (this.level === 0 && !this.node?.expanded) {\n      return false;\n    }\n    if (this.node?.expanded) {\n      this.collapse(event);\n      return;\n    }\n    let parentNodeElement = this.getParentNodeElement(nodeElement.parentElement);\n    if (parentNodeElement) {\n      this.focusRowChange(event.currentTarget, parentNodeElement);\n    }\n    event.preventDefault();\n  }\n  onEnter(event) {\n    this.tree.onNodeClick(event, this.node);\n    this.setTabIndexForSelectionMode(event, this.tree.nodeTouched);\n    event.preventDefault();\n  }\n  setAllNodesTabIndexes() {\n    const nodes = find(this.tree.el.nativeElement, '.p-tree-node');\n    const hasSelectedNode = [...nodes].some(node => node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true');\n    [...nodes].forEach(node => {\n      node.tabIndex = -1;\n    });\n    if (hasSelectedNode) {\n      const selectedNodes = [...nodes].filter(node => node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true');\n      selectedNodes[0].tabIndex = 0;\n      return;\n    }\n    if (nodes.length) {\n      [...nodes][0].tabIndex = 0;\n    }\n  }\n  setTabIndexForSelectionMode(event, nodeTouched) {\n    if (this.tree.selectionMode !== null) {\n      const elements = [...find(this.tree.el.nativeElement, '[role=\"treeitem\"]')];\n      event.currentTarget.tabIndex = nodeTouched === false ? -1 : 0;\n      if (elements.every(element => element.tabIndex === -1)) {\n        elements[0].tabIndex = 0;\n      }\n    }\n  }\n  findNextSiblingOfAncestor(nodeElement) {\n    let parentNodeElement = this.getParentNodeElement(nodeElement);\n    if (parentNodeElement) {\n      if (parentNodeElement.nextElementSibling) return parentNodeElement.nextElementSibling;else return this.findNextSiblingOfAncestor(parentNodeElement);\n    } else {\n      return null;\n    }\n  }\n  findLastVisibleDescendant(nodeElement) {\n    const listElement = Array.from(nodeElement.children).find(el => hasClass(el, 'p-tree-node'));\n    const childrenListElement = listElement?.children[1];\n    if (childrenListElement && childrenListElement.children.length > 0) {\n      const lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\n      return this.findLastVisibleDescendant(lastChildElement);\n    } else {\n      return nodeElement;\n    }\n  }\n  getParentNodeElement(nodeElement) {\n    const parentNodeElement = nodeElement.parentElement?.parentElement?.parentElement;\n    return parentNodeElement?.tagName === 'P-TREENODE' ? parentNodeElement : null;\n  }\n  focusNode(element) {\n    if (this.tree.droppableNodes) element.children[1].focus();else element.children[0].focus();\n  }\n  focusRowChange(firstFocusableRow, currentFocusedRow, lastVisibleDescendant) {\n    firstFocusableRow.tabIndex = '-1';\n    currentFocusedRow.children[0].tabIndex = '0';\n    this.focusNode(lastVisibleDescendant || currentFocusedRow);\n  }\n  focusVirtualNode() {\n    this.timeout = setTimeout(() => {\n      let node = findSingle(document.body, `[data-id=\"${this.node?.key ?? this.node?.data}\"]`);\n      focus(node);\n    }, 1);\n  }\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵUITreeNode_BaseFactory;\n    return function UITreeNode_Factory(__ngFactoryType__) {\n      return (ɵUITreeNode_BaseFactory || (ɵUITreeNode_BaseFactory = i0.ɵɵgetInheritedFactory(UITreeNode)))(__ngFactoryType__ || UITreeNode);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: UITreeNode,\n    selectors: [[\"p-treeNode\"]],\n    inputs: {\n      rowNode: \"rowNode\",\n      node: \"node\",\n      parentNode: \"parentNode\",\n      root: [2, \"root\", \"root\", booleanAttribute],\n      index: [2, \"index\", \"index\", numberAttribute],\n      firstChild: [2, \"firstChild\", \"firstChild\", booleanAttribute],\n      lastChild: [2, \"lastChild\", \"lastChild\", booleanAttribute],\n      level: [2, \"level\", \"level\", numberAttribute],\n      indentation: [2, \"indentation\", \"indentation\", numberAttribute],\n      itemSize: [2, \"itemSize\", \"itemSize\", numberAttribute],\n      loadingMode: \"loadingMode\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"icon\", \"\"], [\"class\", \"p-tree-node-droppoint\", 3, \"ngClass\", \"drop\", \"dragover\", \"dragenter\", \"dragleave\", 4, \"ngIf\"], [\"role\", \"treeitem\", 3, \"keydown\", \"ngClass\", \"ngStyle\"], [3, \"click\", \"contextmenu\", \"dblclick\", \"touchend\", \"drop\", \"dragover\", \"dragenter\", \"dragleave\", \"dragstart\", \"dragend\", \"ngClass\", \"draggable\"], [\"type\", \"button\", \"pRipple\", \"\", \"tabindex\", \"-1\", 1, \"p-tree-node-toggle-button\", 3, \"click\"], [4, \"ngIf\"], [\"class\", \"p-tree-node-toggle-icon\", 4, \"ngIf\"], [\"styleClass\", \"p-tree-node-checkbox\", 3, \"ngModel\", \"binary\", \"indeterminate\", \"disabled\", \"variant\", \"tabindex\", \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [1, \"p-tree-node-label\"], [\"class\", \"p-tree-node-children\", \"style\", \"display: none;\", \"role\", \"group\", 3, \"display\", 4, \"ngIf\"], [1, \"p-tree-node-droppoint\", 3, \"drop\", \"dragover\", \"dragenter\", \"dragleave\", \"ngClass\"], [3, \"styleClass\", 4, \"ngIf\"], [3, \"styleClass\"], [1, \"p-tree-node-toggle-icon\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"styleClass\", \"p-tree-node-checkbox\", 3, \"click\", \"ngModel\", \"binary\", \"indeterminate\", \"disabled\", \"variant\", \"tabindex\"], [\"role\", \"group\", 1, \"p-tree-node-children\", 2, \"display\", \"none\"], [3, \"node\", \"parentNode\", \"firstChild\", \"lastChild\", \"index\", \"itemSize\", \"level\", \"loadingMode\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"node\", \"parentNode\", \"firstChild\", \"lastChild\", \"index\", \"itemSize\", \"level\", \"loadingMode\"]],\n    template: function UITreeNode_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, UITreeNode_Conditional_0_Template, 13, 31);\n      }\n      if (rf & 2) {\n        i0.ɵɵconditional(ctx.node ? 0 : -1);\n      }\n    },\n    dependencies: [UITreeNode, CommonModule, i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i1.NgStyle, Ripple, Checkbox, FormsModule, i2.NgControlStatus, i2.NgModel, ChevronRightIcon, ChevronDownIcon, SpinnerIcon, SharedModule],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UITreeNode, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeNode',\n      standalone: true,\n      imports: [CommonModule, Ripple, Checkbox, FormsModule, ChevronRightIcon, ChevronDownIcon, SpinnerIcon, SharedModule],\n      template: `\n        @if (node) {\n            <li\n                *ngIf=\"tree.droppableNodes\"\n                class=\"p-tree-node-droppoint\"\n                [attr.aria-hidden]=\"true\"\n                [ngClass]=\"{ 'p-tree-node-droppoint-active': draghoverPrev }\"\n                (drop)=\"onDropPoint($event, -1)\"\n                (dragover)=\"onDropPointDragOver($event)\"\n                (dragenter)=\"onDropPointDragEnter($event, -1)\"\n                (dragleave)=\"onDropPointDragLeave($event)\"\n            ></li>\n            <li\n                [ngClass]=\"nodeClass\"\n                [class]=\"node.styleClass\"\n                [ngStyle]=\"{ height: itemSize + 'px' }\"\n                [style]=\"node.style\"\n                [attr.aria-label]=\"node.label\"\n                [attr.aria-checked]=\"checked\"\n                [attr.aria-setsize]=\"node.children ? node.children.length : 0\"\n                [attr.aria-selected]=\"selected\"\n                [attr.aria-expanded]=\"node.expanded\"\n                [attr.aria-posinset]=\"index + 1\"\n                [attr.aria-level]=\"level + 1\"\n                [attr.tabindex]=\"index === 0 ? 0 : -1\"\n                [attr.data-id]=\"node.key\"\n                role=\"treeitem\"\n                (keydown)=\"onKeyDown($event)\"\n            >\n                <div\n                    [ngClass]=\"nodeContentClass\"\n                    [style.paddingLeft]=\"level * indentation + 'rem'\"\n                    (click)=\"onNodeClick($event)\"\n                    (contextmenu)=\"onNodeRightClick($event)\"\n                    (dblclick)=\"onNodeDblClick($event)\"\n                    (touchend)=\"onNodeTouchEnd()\"\n                    (drop)=\"onDropNode($event)\"\n                    (dragover)=\"onDropNodeDragOver($event)\"\n                    (dragenter)=\"onDropNodeDragEnter($event)\"\n                    (dragleave)=\"onDropNodeDragLeave($event)\"\n                    [draggable]=\"tree.draggableNodes\"\n                    (dragstart)=\"onDragStart($event)\"\n                    (dragend)=\"onDragStop($event)\"\n                >\n                    <button type=\"button\" [attr.data-pc-section]=\"'toggler'\" class=\"p-tree-node-toggle-button\" (click)=\"toggle($event)\" pRipple tabindex=\"-1\">\n                        <ng-container *ngIf=\"!tree.togglerIconTemplate && !tree._togglerIconTemplate\">\n                            <ng-container *ngIf=\"!node.loading\">\n                                <ChevronRightIcon *ngIf=\"!node.expanded\" [styleClass]=\"'p-tree-node-toggle-icon'\" />\n                                <ChevronDownIcon *ngIf=\"node.expanded\" [styleClass]=\"'p-tree-node-toggle-icon'\" />\n                            </ng-container>\n                            <ng-container *ngIf=\"loadingMode === 'icon' && node.loading\">\n                                <SpinnerIcon [styleClass]=\"'pi-spin p-tree-node-toggle-icon'\" />\n                            </ng-container>\n                        </ng-container>\n                        <span *ngIf=\"tree.togglerIconTemplate || tree._togglerIconTemplate\" class=\"p-tree-node-toggle-icon\">\n                            <ng-template *ngTemplateOutlet=\"tree.togglerIconTemplate || tree._togglerIconTemplate; context: { $implicit: node.expanded, loading: node.loading }\"></ng-template>\n                        </span>\n                    </button>\n\n                    <p-checkbox\n                        [ngModel]=\"isSelected()\"\n                        styleClass=\"p-tree-node-checkbox\"\n                        [binary]=\"true\"\n                        [indeterminate]=\"node.partialSelected\"\n                        *ngIf=\"tree.selectionMode == 'checkbox'\"\n                        [disabled]=\"node.selectable === false\"\n                        [variant]=\"tree?.config.inputStyle() === 'filled' || tree?.config.inputVariant() === 'filled' ? 'filled' : 'outlined'\"\n                        [attr.data-p-partialchecked]=\"node.partialSelected\"\n                        [tabindex]=\"-1\"\n                        (click)=\"$event.preventDefault()\"\n                    >\n                        <ng-container *ngIf=\"tree.checkboxIconTemplate || tree._checkboxIconTemplate\">\n                            <ng-template #icon>\n                                <ng-template\n                                    *ngTemplateOutlet=\"\n                                        tree.checkboxIconTemplate || tree._checkboxIconTemplate;\n                                        context: {\n                                            $implicit: isSelected(),\n                                            partialSelected: node.partialSelected,\n                                            class: 'p-tree-node-checkbox'\n                                        }\n                                    \"\n                                ></ng-template>\n                            </ng-template>\n                        </ng-container>\n                    </p-checkbox>\n\n                    <span [class]=\"getIcon()\" *ngIf=\"node.icon || node.expandedIcon || node.collapsedIcon\"></span>\n                    <span class=\"p-tree-node-label\">\n                        <span *ngIf=\"!tree.getTemplateForNode(node)\">{{ node.label }}</span>\n                        <span *ngIf=\"tree.getTemplateForNode(node)\">\n                            <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: { $implicit: node }\"></ng-container>\n                        </span>\n                    </span>\n                </div>\n                <ul class=\"p-tree-node-children\" style=\"display: none;\" *ngIf=\"!tree.virtualScroll && node.children && node.expanded\" [style.display]=\"node.expanded ? 'flex' : 'none'\" role=\"group\">\n                    <p-treeNode\n                        *ngFor=\"let childNode of node.children; let firstChild = first; let lastChild = last; let index = index; trackBy: tree.trackBy.bind(this)\"\n                        [node]=\"childNode\"\n                        [parentNode]=\"node\"\n                        [firstChild]=\"firstChild\"\n                        [lastChild]=\"lastChild\"\n                        [index]=\"index\"\n                        [itemSize]=\"itemSize\"\n                        [level]=\"level + 1\"\n                        [loadingMode]=\"loadingMode\"\n                    ></p-treeNode>\n                </ul>\n            </li>\n\n            <li\n                *ngIf=\"tree.droppableNodes && lastChild\"\n                class=\"p-tree-node-droppoint\"\n                [ngClass]=\"{ 'p-tree-node-droppoint-active': draghoverNext }\"\n                (drop)=\"onDropPoint($event, 1)\"\n                [attr.aria-hidden]=\"true\"\n                (dragover)=\"onDropPointDragOver($event)\"\n                (dragenter)=\"onDropPointDragEnter($event, 1)\"\n                (dragleave)=\"onDropPointDragLeave($event)\"\n            ></li>\n        }\n    `,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, {\n    rowNode: [{\n      type: Input\n    }],\n    node: [{\n      type: Input\n    }],\n    parentNode: [{\n      type: Input\n    }],\n    root: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    index: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    firstChild: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    lastChild: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    level: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    indentation: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    itemSize: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    loadingMode: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Tree is used to display hierarchical data.\n * @group Components\n */\nclass Tree extends BaseComponent {\n  dragDropService;\n  /**\n   * An array of treenodes.\n   * @group Props\n   */\n  value;\n  /**\n   * Defines the selection mode.\n   * @group Props\n   */\n  selectionMode;\n  /**\n   * Loading mode display.\n   * @group Props\n   */\n  loadingMode = 'mask';\n  /**\n   * A single treenode instance or an array to refer to the selections.\n   * @group Props\n   */\n  selection;\n  /**\n   * Inline style of the component.\n   * @group Props\n   */\n  style;\n  /**\n   * Style class of the component.\n   * @group Props\n   */\n  styleClass;\n  /**\n   * Context menu instance.\n   * @group Props\n   */\n  contextMenu;\n  /**\n   * Scope of the draggable nodes to match a droppableScope.\n   * @group Props\n   */\n  draggableScope;\n  /**\n   * Scope of the droppable nodes to match a draggableScope.\n   * @group Props\n   */\n  droppableScope;\n  /**\n   * Whether the nodes are draggable.\n   * @group Props\n   */\n  draggableNodes;\n  /**\n   * Whether the nodes are droppable.\n   * @group Props\n   */\n  droppableNodes;\n  /**\n   * Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically.\n   * @group Props\n   */\n  metaKeySelection = false;\n  /**\n   * Whether checkbox selections propagate to ancestor nodes.\n   * @group Props\n   */\n  propagateSelectionUp = true;\n  /**\n   * Whether checkbox selections propagate to descendant nodes.\n   * @group Props\n   */\n  propagateSelectionDown = true;\n  /**\n   * Displays a loader to indicate data load is in progress.\n   * @group Props\n   */\n  loading;\n  /**\n   * The icon to show while indicating data load is in progress.\n   * @group Props\n   */\n  loadingIcon;\n  /**\n   * Text to display when there is no data.\n   * @group Props\n   */\n  emptyMessage = '';\n  /**\n   * Used to define a string that labels the tree.\n   * @group Props\n   */\n  ariaLabel;\n  /**\n   * Defines a string that labels the toggler icon for accessibility.\n   * @group Props\n   */\n  togglerAriaLabel;\n  /**\n   * Establishes relationships between the component and label(s) where its value should be one or more element IDs.\n   * @group Props\n   */\n  ariaLabelledBy;\n  /**\n   * When enabled, drop can be accepted or rejected based on condition defined at onNodeDrop.\n   * @group Props\n   */\n  validateDrop;\n  /**\n   * When specified, displays an input field to filter the items.\n   * @group Props\n   */\n  filter;\n  /**\n   * Determines whether the filter input should be automatically focused when the component is rendered.\n   * @group Props\n   */\n  filterInputAutoFocus = false;\n  /**\n   * When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.\n   * @group Props\n   */\n  filterBy = 'label';\n  /**\n   * Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient.\n   * @group Props\n   */\n  filterMode = 'lenient';\n  /**\n   * Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient.\n   * @group Props\n   */\n  filterOptions;\n  /**\n   * Placeholder text to show when filter input is empty.\n   * @group Props\n   */\n  filterPlaceholder;\n  /**\n   * Values after the tree nodes are filtered.\n   * @group Props\n   */\n  filteredNodes;\n  /**\n   * Locale to use in filtering. The default locale is the host environment's current locale.\n   * @group Props\n   */\n  filterLocale;\n  /**\n   * Height of the scrollable viewport.\n   * @group Props\n   */\n  scrollHeight;\n  /**\n   * Defines if data is loaded and interacted with in lazy manner.\n   * @group Props\n   */\n  lazy = false;\n  /**\n   * Whether the data should be loaded on demand during scroll.\n   * @group Props\n   */\n  virtualScroll;\n  /**\n   * Height of an item in the list for VirtualScrolling.\n   * @group Props\n   */\n  virtualScrollItemSize;\n  /**\n   * Whether to use the scroller feature. The properties of scroller component can be used like an object in it.\n   * @group Props\n   */\n  virtualScrollOptions;\n  /**\n   * Indentation factor for spacing of the nested node when virtual scrolling is enabled.\n   * @group Props\n   */\n  indentation = 1.5;\n  /**\n   * Custom templates of the component.\n   * @group Props\n   */\n  _templateMap;\n  /**\n   * Function to optimize the node list rendering, default algorithm checks for object identity.\n   * @group Props\n   */\n  trackBy = (index, item) => item;\n  /**\n   * Highlights the node on select.\n   * @group Props\n   */\n  highlightOnSelect = false;\n  /**\n   * Height of the node.\n   * @group Props\n   * @deprecated use virtualScrollItemSize property instead.\n   */\n  _virtualNodeHeight;\n  get virtualNodeHeight() {\n    return this._virtualNodeHeight;\n  }\n  set virtualNodeHeight(val) {\n    this._virtualNodeHeight = val;\n    console.log('The virtualNodeHeight property is deprecated, use virtualScrollItemSize property instead.');\n  }\n  /**\n   * Callback to invoke on selection change.\n   * @param {(TreeNode<any> | TreeNode<any>[] | null)} event - Custom selection change event.\n   * @group Emits\n   */\n  selectionChange = new EventEmitter();\n  /**\n   * Callback to invoke when a node is selected.\n   * @param {TreeNodeSelectEvent} event - Node select event.\n   * @group Emits\n   */\n  onNodeSelect = new EventEmitter();\n  /**\n   * Callback to invoke when a node is unselected.\n   * @param {TreeNodeUnSelectEvent} event - Node unselect event.\n   * @group Emits\n   */\n  onNodeUnselect = new EventEmitter();\n  /**\n   * Callback to invoke when a node is expanded.\n   * @param {TreeNodeExpandEvent} event - Node expand event.\n   * @group Emits\n   */\n  onNodeExpand = new EventEmitter();\n  /**\n   * Callback to invoke when a node is collapsed.\n   * @param {TreeNodeCollapseEvent} event - Node collapse event.\n   * @group Emits\n   */\n  onNodeCollapse = new EventEmitter();\n  /**\n   * Callback to invoke when a node is selected with right click.\n   * @param {onNodeContextMenuSelect} event - Node context menu select event.\n   * @group Emits\n   */\n  onNodeContextMenuSelect = new EventEmitter();\n  /**\n   * Callback to invoke when a node is double clicked.\n   * @param {TreeNodeDoubleClickEvent} event - Node double click event.\n   * @group Emits\n   */\n  onNodeDoubleClick = new EventEmitter();\n  /**\n   * Callback to invoke when a node is dropped.\n   * @param {TreeNodeDropEvent} event - Node drop event.\n   * @group Emits\n   */\n  onNodeDrop = new EventEmitter();\n  /**\n   * Callback to invoke in lazy mode to load new data.\n   * @param {TreeLazyLoadEvent} event - Custom lazy load event.\n   * @group Emits\n   */\n  onLazyLoad = new EventEmitter();\n  /**\n   * Callback to invoke in virtual scroll mode when scroll position changes.\n   * @param {TreeScrollEvent} event - Custom scroll event.\n   * @group Emits\n   */\n  onScroll = new EventEmitter();\n  /**\n   * Callback to invoke in virtual scroll mode when scroll position and item's range in view changes.\n   * @param {TreeScrollIndexChangeEvent} event - Scroll index change event.\n   * @group Emits\n   */\n  onScrollIndexChange = new EventEmitter();\n  /**\n   * Callback to invoke when data is filtered.\n   * @param {TreeFilterEvent} event - Custom filter event.\n   * @group Emits\n   */\n  onFilter = new EventEmitter();\n  /**\n   * Filter template.\n   * @group Templates\n   */\n  filterTemplate;\n  /**\n   * Node template.\n   * @group Templates\n   */\n  nodeTemplate;\n  /**\n   * Header template.\n   * @group Templates\n   */\n  headerTemplate;\n  /**\n   * Footer template.\n   * @group Templates\n   */\n  footerTemplate;\n  /**\n   * Loader template.\n   * @group Templates\n   */\n  loaderTemplate;\n  /**\n   * Empty message template.\n   * @group Templates\n   */\n  emptyMessageTemplate;\n  /**\n   * Toggler icon template.\n   * @group Templates\n   */\n  togglerIconTemplate;\n  /**\n   * Checkbox icon template.\n   * @group Templates\n   */\n  checkboxIconTemplate;\n  /**\n   * Loading icon template.\n   * @group Templates\n   */\n  loadingIconTemplate;\n  /**\n   * Filter icon template.\n   * @group Templates\n   */\n  filterIconTemplate;\n  filterViewChild;\n  scroller;\n  wrapperViewChild;\n  templates;\n  _headerTemplate;\n  _emptyMessageTemplate;\n  _footerTemplate;\n  _loaderTemplate;\n  _togglerIconTemplate;\n  _checkboxIconTemplate;\n  _loadingIconTemplate;\n  _filterIconTemplate;\n  _filterTemplate;\n  ngAfterContentInit() {\n    if (this.templates.length) {\n      this._templateMap = {};\n    }\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'header':\n          this._headerTemplate = item.template;\n          break;\n        case 'empty':\n          this._emptyMessageTemplate = item.template;\n          break;\n        case 'footer':\n          this._footerTemplate = item.template;\n          break;\n        case 'loader':\n          this._loaderTemplate = item.template;\n          break;\n        case 'togglericon':\n          this._togglerIconTemplate = item.template;\n          break;\n        case 'checkboxicon':\n          this._checkboxIconTemplate = item.template;\n          break;\n        case 'loadingicon':\n          this._loadingIconTemplate = item.template;\n          break;\n        case 'filtericon':\n          this._filterIconTemplate = item.template;\n          break;\n        case 'filter':\n          this._filterTemplate = item.template;\n          break;\n        default:\n          this._templateMap[item.name] = item.template;\n          break;\n      }\n    });\n  }\n  serializedValue;\n  nodeTouched;\n  dragNodeTree;\n  dragNode;\n  dragNodeSubNodes;\n  dragNodeIndex;\n  dragNodeScope;\n  dragHover;\n  dragStartSubscription;\n  dragStopSubscription;\n  _componentStyle = inject(TreeStyle);\n  constructor(dragDropService) {\n    super();\n    this.dragDropService = dragDropService;\n  }\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.filterBy) {\n      this.filterOptions = {\n        filter: value => this._filter(value),\n        reset: () => this.resetFilter()\n      };\n    }\n    if (this.droppableNodes) {\n      this.dragStartSubscription = this.dragDropService.dragStart$.subscribe(event => {\n        this.dragNodeTree = event.tree;\n        this.dragNode = event.node;\n        this.dragNodeSubNodes = event.subNodes;\n        this.dragNodeIndex = event.index;\n        this.dragNodeScope = event.scope;\n      });\n      this.dragStopSubscription = this.dragDropService.dragStop$.subscribe(event => {\n        this.dragNodeTree = null;\n        this.dragNode = null;\n        this.dragNodeSubNodes = null;\n        this.dragNodeIndex = null;\n        this.dragNodeScope = null;\n        this.dragHover = false;\n      });\n    }\n  }\n  ngOnChanges(simpleChange) {\n    super.ngOnChanges(simpleChange);\n    if (simpleChange.value) {\n      this.updateSerializedValue();\n      if (this.hasFilterActive()) {\n        this._filter(this.filterViewChild.nativeElement.value);\n      }\n    }\n  }\n  get containerClass() {\n    return this._componentStyle.classes.root({\n      instance: this\n    });\n  }\n  get emptyMessageLabel() {\n    return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);\n  }\n  updateSerializedValue() {\n    this.serializedValue = [];\n    this.serializeNodes(null, this.getRootNode(), 0, true);\n  }\n  serializeNodes(parent, nodes, level, visible) {\n    if (nodes && nodes.length) {\n      for (let node of nodes) {\n        node.parent = parent;\n        const rowNode = {\n          node: node,\n          parent: parent,\n          level: level,\n          visible: visible && (parent ? parent.expanded : true)\n        };\n        this.serializedValue.push(rowNode);\n        if (rowNode.visible && node.expanded) {\n          this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n        }\n      }\n    }\n  }\n  onNodeClick(event, node) {\n    let eventTarget = event.target;\n    if (hasClass(eventTarget, 'p-tree-toggler') || hasClass(eventTarget, 'p-tree-toggler-icon')) {\n      return;\n    } else if (this.selectionMode) {\n      if (node.selectable === false) {\n        node.style = '--p-focus-ring-color: none;';\n        return;\n      } else {\n        if (!node.style?.includes('--p-focus-ring-color')) {\n          node.style = node.style ? `${node.style}--p-focus-ring-color: var(--primary-color)` : '--p-focus-ring-color: var(--primary-color)';\n        }\n      }\n      if (this.hasFilteredNodes()) {\n        node = this.getNodeWithKey(node.key, this.filteredNodes);\n        if (!node) {\n          return;\n        }\n      }\n      let index = this.findIndexInSelection(node);\n      let selected = index >= 0;\n      if (this.isCheckboxSelectionMode()) {\n        if (selected) {\n          if (this.propagateSelectionDown) this.propagateDown(node, false);else this.selection = this.selection.filter((val, i) => i != index);\n          if (this.propagateSelectionUp && node.parent) {\n            this.propagateUp(node.parent, false);\n          }\n          this.selectionChange.emit(this.selection);\n          this.onNodeUnselect.emit({\n            originalEvent: event,\n            node: node\n          });\n        } else {\n          if (this.propagateSelectionDown) this.propagateDown(node, true);else this.selection = [...(this.selection || []), node];\n          if (this.propagateSelectionUp && node.parent) {\n            this.propagateUp(node.parent, true);\n          }\n          this.selectionChange.emit(this.selection);\n          this.onNodeSelect.emit({\n            originalEvent: event,\n            node: node\n          });\n        }\n      } else {\n        let metaSelection = this.nodeTouched ? false : this.metaKeySelection;\n        if (metaSelection) {\n          let metaKey = event.metaKey || event.ctrlKey;\n          if (selected && metaKey) {\n            if (this.isSingleSelectionMode()) {\n              this.selectionChange.emit(null);\n            } else {\n              this.selection = this.selection.filter((val, i) => i != index);\n              this.selectionChange.emit(this.selection);\n            }\n            this.onNodeUnselect.emit({\n              originalEvent: event,\n              node: node\n            });\n          } else {\n            if (this.isSingleSelectionMode()) {\n              this.selectionChange.emit(node);\n            } else if (this.isMultipleSelectionMode()) {\n              this.selection = !metaKey ? [] : this.selection || [];\n              this.selection = [...this.selection, node];\n              this.selectionChange.emit(this.selection);\n            }\n            this.onNodeSelect.emit({\n              originalEvent: event,\n              node: node\n            });\n          }\n        } else {\n          if (this.isSingleSelectionMode()) {\n            if (selected) {\n              this.selection = null;\n              this.onNodeUnselect.emit({\n                originalEvent: event,\n                node: node\n              });\n            } else {\n              this.selection = node;\n              setTimeout(() => {\n                this.onNodeSelect.emit({\n                  originalEvent: event,\n                  node: node\n                });\n              });\n            }\n          } else {\n            if (selected) {\n              this.selection = this.selection.filter((val, i) => i != index);\n              this.onNodeUnselect.emit({\n                originalEvent: event,\n                node: node\n              });\n            } else {\n              this.selection = [...(this.selection || []), node];\n              setTimeout(() => {\n                this.onNodeSelect.emit({\n                  originalEvent: event,\n                  node: node\n                });\n              });\n            }\n          }\n          this.selectionChange.emit(this.selection);\n        }\n      }\n    }\n    this.nodeTouched = false;\n  }\n  onNodeTouchEnd() {\n    this.nodeTouched = true;\n  }\n  onNodeRightClick(event, node) {\n    if (this.contextMenu) {\n      let eventTarget = event.target;\n      if (eventTarget.className && eventTarget.className.indexOf('p-tree-toggler') === 0) {\n        return;\n      } else {\n        let index = this.findIndexInSelection(node);\n        let selected = index >= 0;\n        if (!selected) {\n          if (this.isSingleSelectionMode()) this.selectionChange.emit(node);else this.selectionChange.emit([node]);\n        }\n        this.contextMenu.show(event);\n        this.onNodeContextMenuSelect.emit({\n          originalEvent: event,\n          node: node\n        });\n      }\n    }\n  }\n  onNodeDblClick(event, node) {\n    this.onNodeDoubleClick.emit({\n      originalEvent: event,\n      node: node\n    });\n  }\n  findIndexInSelection(node) {\n    let index = -1;\n    if (this.selectionMode && this.selection) {\n      if (this.isSingleSelectionMode()) {\n        let areNodesEqual = this.selection.key && this.selection.key === node.key || this.selection == node;\n        index = areNodesEqual ? 0 : -1;\n      } else {\n        for (let i = 0; i < this.selection.length; i++) {\n          let selectedNode = this.selection[i];\n          let areNodesEqual = selectedNode.key && selectedNode.key === node.key || selectedNode == node;\n          if (areNodesEqual) {\n            index = i;\n            break;\n          }\n        }\n      }\n    }\n    return index;\n  }\n  syncNodeOption(node, parentNodes, option, value) {\n    // to synchronize the node option between the filtered nodes and the original nodes(this.value)\n    const _node = this.hasFilteredNodes() ? this.getNodeWithKey(node.key, parentNodes) : null;\n    if (_node) {\n      _node[option] = value || node[option];\n    }\n  }\n  hasFilteredNodes() {\n    return this.filter && this.filteredNodes && this.filteredNodes.length;\n  }\n  hasFilterActive() {\n    return this.filter && this.filterViewChild?.nativeElement?.value.length > 0;\n  }\n  getNodeWithKey(key, nodes) {\n    for (let node of nodes) {\n      if (node.key === key) {\n        return node;\n      }\n      if (node.children) {\n        let matchedNode = this.getNodeWithKey(key, node.children);\n        if (matchedNode) {\n          return matchedNode;\n        }\n      }\n    }\n  }\n  propagateUp(node, select) {\n    if (node.children && node.children.length) {\n      let selectedCount = 0;\n      let childPartialSelected = false;\n      for (let child of node.children) {\n        if (this.isSelected(child)) {\n          selectedCount++;\n        } else if (child.partialSelected) {\n          childPartialSelected = true;\n        }\n      }\n      if (select && selectedCount == node.children.length) {\n        this.selection = [...(this.selection || []), node];\n        node.partialSelected = false;\n      } else {\n        if (!select) {\n          let index = this.findIndexInSelection(node);\n          if (index >= 0) {\n            this.selection = this.selection.filter((val, i) => i != index);\n          }\n        }\n        if (childPartialSelected || selectedCount > 0 && selectedCount != node.children.length) node.partialSelected = true;else node.partialSelected = false;\n      }\n      this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\n    }\n    let parent = node.parent;\n    if (parent) {\n      this.propagateUp(parent, select);\n    }\n  }\n  propagateDown(node, select) {\n    let index = this.findIndexInSelection(node);\n    if (select && index == -1) {\n      this.selection = [...(this.selection || []), node];\n    } else if (!select && index > -1) {\n      this.selection = this.selection.filter((val, i) => i != index);\n    }\n    node.partialSelected = false;\n    this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\n    if (node.children && node.children.length) {\n      for (let child of node.children) {\n        this.propagateDown(child, select);\n      }\n    }\n  }\n  isSelected(node) {\n    return this.findIndexInSelection(node) != -1;\n  }\n  isSingleSelectionMode() {\n    return this.selectionMode && this.selectionMode == 'single';\n  }\n  isMultipleSelectionMode() {\n    return this.selectionMode && this.selectionMode == 'multiple';\n  }\n  isCheckboxSelectionMode() {\n    return this.selectionMode && this.selectionMode == 'checkbox';\n  }\n  isNodeLeaf(node) {\n    return node.leaf == false ? false : !(node.children && node.children.length);\n  }\n  getRootNode() {\n    return this.filteredNodes ? this.filteredNodes : this.value;\n  }\n  getTemplateForNode(node) {\n    if (this._templateMap) return node.type ? this._templateMap[node.type] : this._templateMap['default'];else return null;\n  }\n  onDragOver(event) {\n    if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n      event.dataTransfer.dropEffect = 'move';\n      event.preventDefault();\n    }\n  }\n  onDrop(event) {\n    if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n      event.preventDefault();\n      let dragNode = this.dragNode;\n      if (this.allowDrop(dragNode, null, this.dragNodeScope)) {\n        let dragNodeIndex = this.dragNodeIndex;\n        this.value = this.value || [];\n        if (this.validateDrop) {\n          this.onNodeDrop.emit({\n            originalEvent: event,\n            dragNode: dragNode,\n            dropNode: null,\n            index: dragNodeIndex,\n            accept: () => {\n              this.processTreeDrop(dragNode, dragNodeIndex);\n            }\n          });\n        } else {\n          this.onNodeDrop.emit({\n            originalEvent: event,\n            dragNode: dragNode,\n            dropNode: null,\n            index: dragNodeIndex\n          });\n          this.processTreeDrop(dragNode, dragNodeIndex);\n        }\n      }\n    }\n  }\n  processTreeDrop(dragNode, dragNodeIndex) {\n    this.dragNodeSubNodes.splice(dragNodeIndex, 1);\n    this.value.push(dragNode);\n    this.dragDropService.stopDrag({\n      node: dragNode\n    });\n  }\n  onDragEnter() {\n    if (this.droppableNodes && this.allowDrop(this.dragNode, null, this.dragNodeScope)) {\n      this.dragHover = true;\n    }\n  }\n  onDragLeave(event) {\n    if (this.droppableNodes) {\n      let rect = event.currentTarget.getBoundingClientRect();\n      if (event.x > rect.left + rect.width || event.x < rect.left || event.y > rect.top + rect.height || event.y < rect.top) {\n        this.dragHover = false;\n      }\n    }\n  }\n  allowDrop(dragNode, dropNode, dragNodeScope) {\n    if (!dragNode) {\n      //prevent random html elements to be dragged\n      return false;\n    } else if (this.isValidDragScope(dragNodeScope)) {\n      let allow = true;\n      if (dropNode) {\n        if (dragNode === dropNode) {\n          allow = false;\n        } else {\n          let parent = dropNode.parent;\n          while (parent != null) {\n            if (parent === dragNode) {\n              allow = false;\n              break;\n            }\n            parent = parent.parent;\n          }\n        }\n      }\n      return allow;\n    } else {\n      return false;\n    }\n  }\n  isValidDragScope(dragScope) {\n    let dropScope = this.droppableScope;\n    if (dropScope) {\n      if (typeof dropScope === 'string') {\n        if (typeof dragScope === 'string') return dropScope === dragScope;else if (Array.isArray(dragScope)) return dragScope.indexOf(dropScope) != -1;\n      } else if (Array.isArray(dropScope)) {\n        if (typeof dragScope === 'string') {\n          return dropScope.indexOf(dragScope) != -1;\n        } else if (Array.isArray(dragScope)) {\n          for (let s of dropScope) {\n            for (let ds of dragScope) {\n              if (s === ds) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n      return false;\n    } else {\n      return true;\n    }\n  }\n  _filter(value) {\n    let filterValue = value;\n    if (filterValue === '') {\n      this.filteredNodes = null;\n    } else {\n      this.filteredNodes = [];\n      const searchFields = this.filterBy.split(',');\n      const filterText = removeAccents(filterValue).toLocaleLowerCase(this.filterLocale);\n      const isStrictMode = this.filterMode === 'strict';\n      for (let node of this.value) {\n        let copyNode = {\n          ...node\n        };\n        let paramsWithoutNode = {\n          searchFields,\n          filterText,\n          isStrictMode\n        };\n        if (isStrictMode && (this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode)) || !isStrictMode && (this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode))) {\n          this.filteredNodes.push(copyNode);\n        }\n      }\n    }\n    this.updateSerializedValue();\n    this.onFilter.emit({\n      filter: filterValue,\n      filteredValue: this.filteredNodes\n    });\n  }\n  /**\n   * Resets filter.\n   * @group Method\n   */\n  resetFilter() {\n    this.filteredNodes = null;\n    if (this.filterViewChild && this.filterViewChild.nativeElement) {\n      this.filterViewChild.nativeElement.value = '';\n    }\n  }\n  /**\n   * Scrolls to virtual index.\n   * @param {number} number - Index to be scrolled.\n   * @group Method\n   */\n  scrollToVirtualIndex(index) {\n    this.virtualScroll && this.scroller?.scrollToIndex(index);\n  }\n  /**\n   * Scrolls to virtual index.\n   * @param {ScrollToOptions} options - Scroll options.\n   * @group Method\n   */\n  scrollTo(options) {\n    if (this.virtualScroll) {\n      this.scroller?.scrollTo(options);\n    } else if (this.wrapperViewChild && this.wrapperViewChild.nativeElement) {\n      if (this.wrapperViewChild.nativeElement.scrollTo) {\n        this.wrapperViewChild.nativeElement.scrollTo(options);\n      } else {\n        this.wrapperViewChild.nativeElement.scrollLeft = options.left;\n        this.wrapperViewChild.nativeElement.scrollTop = options.top;\n      }\n    }\n  }\n  findFilteredNodes(node, paramsWithoutNode) {\n    if (node) {\n      let matched = false;\n      if (node.children) {\n        let childNodes = [...node.children];\n        node.children = [];\n        for (let childNode of childNodes) {\n          let copyChildNode = {\n            ...childNode\n          };\n          if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n            matched = true;\n            node.children.push(copyChildNode);\n          }\n        }\n      }\n      if (matched) {\n        node.expanded = true;\n        return true;\n      }\n    }\n  }\n  isFilterMatched(node, params) {\n    let {\n      searchFields,\n      filterText,\n      isStrictMode\n    } = params;\n    let matched = false;\n    for (let field of searchFields) {\n      let fieldValue = removeAccents(String(resolveFieldData(node, field))).toLocaleLowerCase(this.filterLocale);\n      if (fieldValue.indexOf(filterText) > -1) {\n        matched = true;\n      }\n    }\n    if (!matched || isStrictMode && !this.isNodeLeaf(node)) {\n      matched = this.findFilteredNodes(node, {\n        searchFields,\n        filterText,\n        isStrictMode\n      }) || matched;\n    }\n    return matched;\n  }\n  getIndex(options, index) {\n    const getItemOptions = options['getItemOptions'];\n    return getItemOptions ? getItemOptions(index).index : index;\n  }\n  getBlockableElement() {\n    return this.el.nativeElement.children[0];\n  }\n  ngOnDestroy() {\n    if (this.dragStartSubscription) {\n      this.dragStartSubscription.unsubscribe();\n    }\n    if (this.dragStopSubscription) {\n      this.dragStopSubscription.unsubscribe();\n    }\n    super.ngOnDestroy();\n  }\n  static ɵfac = function Tree_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || Tree)(i0.ɵɵdirectiveInject(i3.TreeDragDropService, 8));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Tree,\n    selectors: [[\"p-tree\"]],\n    contentQueries: function Tree_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c5, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c6, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c7, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c8, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c9, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c10, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c11, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c12, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c13, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c14, 4);\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.loaderTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.emptyMessageTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.togglerIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.checkboxIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.loadingIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function Tree_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c5, 5);\n        i0.ɵɵviewQuery(_c15, 5);\n        i0.ɵɵviewQuery(_c16, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scroller = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.wrapperViewChild = _t.first);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      selectionMode: \"selectionMode\",\n      loadingMode: \"loadingMode\",\n      selection: \"selection\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      contextMenu: \"contextMenu\",\n      draggableScope: \"draggableScope\",\n      droppableScope: \"droppableScope\",\n      draggableNodes: [2, \"draggableNodes\", \"draggableNodes\", booleanAttribute],\n      droppableNodes: [2, \"droppableNodes\", \"droppableNodes\", booleanAttribute],\n      metaKeySelection: [2, \"metaKeySelection\", \"metaKeySelection\", booleanAttribute],\n      propagateSelectionUp: [2, \"propagateSelectionUp\", \"propagateSelectionUp\", booleanAttribute],\n      propagateSelectionDown: [2, \"propagateSelectionDown\", \"propagateSelectionDown\", booleanAttribute],\n      loading: [2, \"loading\", \"loading\", booleanAttribute],\n      loadingIcon: \"loadingIcon\",\n      emptyMessage: \"emptyMessage\",\n      ariaLabel: \"ariaLabel\",\n      togglerAriaLabel: \"togglerAriaLabel\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      validateDrop: [2, \"validateDrop\", \"validateDrop\", booleanAttribute],\n      filter: [2, \"filter\", \"filter\", booleanAttribute],\n      filterInputAutoFocus: [2, \"filterInputAutoFocus\", \"filterInputAutoFocus\", booleanAttribute],\n      filterBy: \"filterBy\",\n      filterMode: \"filterMode\",\n      filterOptions: \"filterOptions\",\n      filterPlaceholder: \"filterPlaceholder\",\n      filteredNodes: \"filteredNodes\",\n      filterLocale: \"filterLocale\",\n      scrollHeight: \"scrollHeight\",\n      lazy: [2, \"lazy\", \"lazy\", booleanAttribute],\n      virtualScroll: [2, \"virtualScroll\", \"virtualScroll\", booleanAttribute],\n      virtualScrollItemSize: [2, \"virtualScrollItemSize\", \"virtualScrollItemSize\", numberAttribute],\n      virtualScrollOptions: \"virtualScrollOptions\",\n      indentation: [2, \"indentation\", \"indentation\", numberAttribute],\n      _templateMap: \"_templateMap\",\n      trackBy: \"trackBy\",\n      highlightOnSelect: [2, \"highlightOnSelect\", \"highlightOnSelect\", booleanAttribute],\n      virtualNodeHeight: \"virtualNodeHeight\"\n    },\n    outputs: {\n      selectionChange: \"selectionChange\",\n      onNodeSelect: \"onNodeSelect\",\n      onNodeUnselect: \"onNodeUnselect\",\n      onNodeExpand: \"onNodeExpand\",\n      onNodeCollapse: \"onNodeCollapse\",\n      onNodeContextMenuSelect: \"onNodeContextMenuSelect\",\n      onNodeDoubleClick: \"onNodeDoubleClick\",\n      onNodeDrop: \"onNodeDrop\",\n      onLazyLoad: \"onLazyLoad\",\n      onScroll: \"onScroll\",\n      onScrollIndexChange: \"onScrollIndexChange\",\n      onFilter: \"onFilter\"\n    },\n    features: [i0.ɵɵProvidersFeature([TreeStyle]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 8,\n    vars: 10,\n    consts: [[\"filter\", \"\"], [\"scroller\", \"\"], [\"content\", \"\"], [\"treeNode\", \"\"], [\"loader\", \"\"], [\"wrapper\", \"\"], [\"emptyFilter\", \"\"], [3, \"drop\", \"dragover\", \"dragenter\", \"dragleave\", \"ngClass\", \"ngStyle\"], [\"class\", \"p-tree-mask p-overlay-mask\", 4, \"ngIf\"], [4, \"ngTemplateOutlet\"], [4, \"ngIf\"], [\"class\", \"p-tree-empty-message\", 4, \"ngIf\"], [1, \"p-tree-mask\", \"p-overlay-mask\"], [3, \"class\", 4, \"ngIf\"], [3, \"spin\", \"styleClass\", 4, \"ngIf\"], [\"class\", \"p-tree-loading-icon\", 4, \"ngIf\"], [3, \"spin\", \"styleClass\"], [1, \"p-tree-loading-icon\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"pInputText\", \"\", \"type\", \"search\", \"autocomplete\", \"off\", 1, \"p-tree-filter-input\", 3, \"keydown.enter\", \"input\", \"pAutoFocus\"], [\"class\", \"p-tree-filter-icon\", 4, \"ngIf\"], [1, \"p-tree-filter-icon\"], [\"styleClass\", \"p-tree-root\", 3, \"items\", \"tabindex\", \"style\", \"scrollHeight\", \"itemSize\", \"lazy\", \"options\", \"onScroll\", \"onScrollIndexChange\", \"onLazyLoad\", 4, \"ngIf\"], [\"styleClass\", \"p-tree-root\", 3, \"onScroll\", \"onScrollIndexChange\", \"onLazyLoad\", \"items\", \"tabindex\", \"scrollHeight\", \"itemSize\", \"lazy\", \"options\"], [\"class\", \"p-tree-root-children\", \"role\", \"tree\", 3, \"ngClass\", \"style\", 4, \"ngIf\"], [\"role\", \"tree\", 1, \"p-tree-root-children\", 3, \"ngClass\"], [3, \"level\", \"rowNode\", \"node\", \"parentNode\", \"firstChild\", \"lastChild\", \"index\", \"itemSize\", \"indentation\", \"loadingMode\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"level\", \"rowNode\", \"node\", \"parentNode\", \"firstChild\", \"lastChild\", \"index\", \"itemSize\", \"indentation\", \"loadingMode\"], [1, \"p-tree-root\"], [\"class\", \"p-tree-root-children\", \"role\", \"tree\", 4, \"ngIf\"], [\"role\", \"tree\", 1, \"p-tree-root-children\"], [3, \"node\", \"firstChild\", \"lastChild\", \"index\", \"level\", \"loadingMode\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"node\", \"firstChild\", \"lastChild\", \"index\", \"level\", \"loadingMode\"], [1, \"p-tree-empty-message\"], [4, \"ngIf\", \"ngIfElse\"]],\n    template: function Tree_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 7);\n        i0.ɵɵlistener(\"drop\", function Tree_Template_div_drop_0_listener($event) {\n          return ctx.onDrop($event);\n        })(\"dragover\", function Tree_Template_div_dragover_0_listener($event) {\n          return ctx.onDragOver($event);\n        })(\"dragenter\", function Tree_Template_div_dragenter_0_listener() {\n          return ctx.onDragEnter();\n        })(\"dragleave\", function Tree_Template_div_dragleave_0_listener($event) {\n          return ctx.onDragLeave($event);\n        });\n        i0.ɵɵtemplate(1, Tree_div_1_Template, 3, 2, \"div\", 8)(2, Tree_ng_container_2_Template, 1, 0, \"ng-container\", 9)(3, Tree_Conditional_3_Template, 1, 4, \"ng-container\")(4, Tree_Conditional_4_Template, 1, 1, \"p-iconField\")(5, Tree_ng_container_5_Template, 3, 2, \"ng-container\", 10)(6, Tree_div_6_Template, 3, 3, \"div\", 11)(7, Tree_ng_container_7_Template, 1, 0, \"ng-container\", 9);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        let tmp_6_0;\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngClass\", ctx.containerClass)(\"ngStyle\", ctx.style);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.loading && ctx.loadingMode === \"mask\");\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.headerTemplate || ctx._headerTemplate);\n        i0.ɵɵadvance();\n        i0.ɵɵconditional(ctx.filterTemplate || ctx._filterTemplate ? 3 : 4);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", (tmp_6_0 = ctx.getRootNode()) == null ? null : tmp_6_0.length);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading && (ctx.getRootNode() == null || ctx.getRootNode().length === 0));\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.footerTemplate || ctx._footerTemplate);\n      }\n    },\n    dependencies: [CommonModule, i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i1.NgStyle, Scroller, SharedModule, SearchIcon, SpinnerIcon, InputText, FormsModule, IconField, InputIcon, UITreeNode, AutoFocusModule, i4.AutoFocus],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Tree, [{\n    type: Component,\n    args: [{\n      selector: 'p-tree',\n      standalone: true,\n      imports: [CommonModule, Scroller, SharedModule, SearchIcon, SpinnerIcon, InputText, FormsModule, IconField, InputIcon, UITreeNode, AutoFocusModule],\n      template: `\n        <div [ngClass]=\"containerClass\" [ngStyle]=\"style\" [class]=\"styleClass\" (drop)=\"onDrop($event)\" (dragover)=\"onDragOver($event)\" (dragenter)=\"onDragEnter()\" (dragleave)=\"onDragLeave($event)\">\n            <div class=\"p-tree-mask p-overlay-mask\" *ngIf=\"loading && loadingMode === 'mask'\">\n                <i *ngIf=\"loadingIcon\" [class]=\"'p-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n                <ng-container *ngIf=\"!loadingIcon\">\n                    <SpinnerIcon *ngIf=\"!loadingIconTemplate && !_loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-tree-loading-icon'\" />\n                    <span *ngIf=\"loadingIconTemplate || _loadingIconTemplate\" class=\"p-tree-loading-icon\">\n                        <ng-template *ngTemplateOutlet=\"loadingIconTemplate || _loadingIconTemplate\"></ng-template>\n                    </span>\n                </ng-container>\n            </div>\n            <ng-container *ngTemplateOutlet=\"headerTemplate || _headerTemplate\"></ng-container>\n            @if (filterTemplate || _filterTemplate) {\n                <ng-container *ngTemplateOutlet=\"filterTemplate || _filterTemplate; context: { $implicit: filterOptions }\"></ng-container>\n            } @else {\n                <p-iconField *ngIf=\"filter\">\n                    <input\n                        #filter\n                        [pAutoFocus]=\"filterInputAutoFocus\"\n                        pInputText\n                        type=\"search\"\n                        autocomplete=\"off\"\n                        class=\"p-tree-filter-input\"\n                        [attr.placeholder]=\"filterPlaceholder\"\n                        (keydown.enter)=\"$event.preventDefault()\"\n                        (input)=\"_filter($event.target.value)\"\n                    />\n                    <p-inputIcon>\n                        <SearchIcon *ngIf=\"!filterIconTemplate && !_filterIconTemplate\" class=\"p-tree-filter-icon\" />\n                        <span *ngIf=\"filterIconTemplate || _filterIconTemplate\">\n                            <ng-template *ngTemplateOutlet=\"filterIconTemplate || _filterIconTemplate\"></ng-template>\n                        </span>\n                    </p-inputIcon>\n                </p-iconField>\n            }\n\n            <ng-container *ngIf=\"getRootNode()?.length\">\n                <p-scroller\n                    #scroller\n                    *ngIf=\"virtualScroll\"\n                    [items]=\"serializedValue\"\n                    [tabindex]=\"-1\"\n                    styleClass=\"p-tree-root\"\n                    [style]=\"{ height: scrollHeight !== 'flex' ? scrollHeight : undefined }\"\n                    [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\n                    [itemSize]=\"virtualScrollItemSize || _virtualNodeHeight\"\n                    [lazy]=\"lazy\"\n                    (onScroll)=\"onScroll.emit($event)\"\n                    (onScrollIndexChange)=\"onScrollIndexChange.emit($event)\"\n                    (onLazyLoad)=\"onLazyLoad.emit($event)\"\n                    [options]=\"virtualScrollOptions\"\n                >\n                    <ng-template #content let-items let-scrollerOptions=\"options\">\n                        <ul *ngIf=\"items\" class=\"p-tree-root-children\" [ngClass]=\"scrollerOptions.contentStyleClass\" [style]=\"scrollerOptions.contentStyle\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                            <p-treeNode\n                                #treeNode\n                                *ngFor=\"let rowNode of items; let firstChild = first; let lastChild = last; let index = index; trackBy: trackBy\"\n                                [level]=\"rowNode.level\"\n                                [rowNode]=\"rowNode\"\n                                [node]=\"rowNode.node\"\n                                [parentNode]=\"rowNode.parent\"\n                                [firstChild]=\"firstChild\"\n                                [lastChild]=\"lastChild\"\n                                [index]=\"getIndex(scrollerOptions, index)\"\n                                [itemSize]=\"scrollerOptions.itemSize\"\n                                [indentation]=\"indentation\"\n                                [loadingMode]=\"loadingMode\"\n                            ></p-treeNode>\n                        </ul>\n                    </ng-template>\n                    <ng-container *ngIf=\"loaderTemplate || _loaderTemplate\">\n                        <ng-template #loader let-scrollerOptions=\"options\">\n                            <ng-container *ngTemplateOutlet=\"loaderTemplate || _loaderTemplate; context: { options: scrollerOptions }\"></ng-container>\n                        </ng-template>\n                    </ng-container>\n                </p-scroller>\n                <ng-container *ngIf=\"!virtualScroll\">\n                    <div #wrapper class=\"p-tree-root\" [style.max-height]=\"scrollHeight\">\n                        <ul class=\"p-tree-root-children\" *ngIf=\"getRootNode()\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                            <p-treeNode\n                                *ngFor=\"let node of getRootNode(); let firstChild = first; let lastChild = last; let index = index; trackBy: trackBy.bind(this)\"\n                                [node]=\"node\"\n                                [firstChild]=\"firstChild\"\n                                [lastChild]=\"lastChild\"\n                                [index]=\"index\"\n                                [level]=\"0\"\n                                [loadingMode]=\"loadingMode\"\n                            ></p-treeNode>\n                        </ul>\n                    </div>\n                </ng-container>\n            </ng-container>\n\n            <div class=\"p-tree-empty-message\" *ngIf=\"!loading && (getRootNode() == null || getRootNode().length === 0)\">\n                <ng-container *ngIf=\"!emptyMessageTemplate && !_emptyMessageTemplate; else emptyFilter\">\n                    {{ emptyMessageLabel }}\n                </ng-container>\n                <ng-template #emptyFilter *ngTemplateOutlet=\"emptyMessageTemplate || _emptyMessageTemplate\"></ng-template>\n            </div>\n            <ng-container *ngTemplateOutlet=\"footerTemplate || _footerTemplate\"></ng-container>\n        </div>\n    `,\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      providers: [TreeStyle]\n    }]\n  }], () => [{\n    type: i3.TreeDragDropService,\n    decorators: [{\n      type: Optional\n    }]\n  }], {\n    value: [{\n      type: Input\n    }],\n    selectionMode: [{\n      type: Input\n    }],\n    loadingMode: [{\n      type: Input\n    }],\n    selection: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    contextMenu: [{\n      type: Input\n    }],\n    draggableScope: [{\n      type: Input\n    }],\n    droppableScope: [{\n      type: Input\n    }],\n    draggableNodes: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    droppableNodes: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    metaKeySelection: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    propagateSelectionUp: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    propagateSelectionDown: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    loading: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    loadingIcon: [{\n      type: Input\n    }],\n    emptyMessage: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    togglerAriaLabel: [{\n      type: Input\n    }],\n    ariaLabelledBy: [{\n      type: Input\n    }],\n    validateDrop: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    filter: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    filterInputAutoFocus: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    filterBy: [{\n      type: Input\n    }],\n    filterMode: [{\n      type: Input\n    }],\n    filterOptions: [{\n      type: Input\n    }],\n    filterPlaceholder: [{\n      type: Input\n    }],\n    filteredNodes: [{\n      type: Input\n    }],\n    filterLocale: [{\n      type: Input\n    }],\n    scrollHeight: [{\n      type: Input\n    }],\n    lazy: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    virtualScroll: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    virtualScrollItemSize: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    virtualScrollOptions: [{\n      type: Input\n    }],\n    indentation: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    _templateMap: [{\n      type: Input\n    }],\n    trackBy: [{\n      type: Input\n    }],\n    highlightOnSelect: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    virtualNodeHeight: [{\n      type: Input\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    onNodeSelect: [{\n      type: Output\n    }],\n    onNodeUnselect: [{\n      type: Output\n    }],\n    onNodeExpand: [{\n      type: Output\n    }],\n    onNodeCollapse: [{\n      type: Output\n    }],\n    onNodeContextMenuSelect: [{\n      type: Output\n    }],\n    onNodeDoubleClick: [{\n      type: Output\n    }],\n    onNodeDrop: [{\n      type: Output\n    }],\n    onLazyLoad: [{\n      type: Output\n    }],\n    onScroll: [{\n      type: Output\n    }],\n    onScrollIndexChange: [{\n      type: Output\n    }],\n    onFilter: [{\n      type: Output\n    }],\n    filterTemplate: [{\n      type: ContentChild,\n      args: ['filter', {\n        descendants: false\n      }]\n    }],\n    nodeTemplate: [{\n      type: ContentChild,\n      args: ['node', {\n        descendants: false\n      }]\n    }],\n    headerTemplate: [{\n      type: ContentChild,\n      args: ['header', {\n        descendants: false\n      }]\n    }],\n    footerTemplate: [{\n      type: ContentChild,\n      args: ['footer', {\n        descendants: false\n      }]\n    }],\n    loaderTemplate: [{\n      type: ContentChild,\n      args: ['loader', {\n        descendants: false\n      }]\n    }],\n    emptyMessageTemplate: [{\n      type: ContentChild,\n      args: ['empty', {\n        descendants: false\n      }]\n    }],\n    togglerIconTemplate: [{\n      type: ContentChild,\n      args: ['togglericon', {\n        descendants: false\n      }]\n    }],\n    checkboxIconTemplate: [{\n      type: ContentChild,\n      args: ['checkboxicon', {\n        descendants: false\n      }]\n    }],\n    loadingIconTemplate: [{\n      type: ContentChild,\n      args: ['loadingicon', {\n        descendants: false\n      }]\n    }],\n    filterIconTemplate: [{\n      type: ContentChild,\n      args: ['filtericon', {\n        descendants: false\n      }]\n    }],\n    filterViewChild: [{\n      type: ViewChild,\n      args: ['filter']\n    }],\n    scroller: [{\n      type: ViewChild,\n      args: ['scroller']\n    }],\n    wrapperViewChild: [{\n      type: ViewChild,\n      args: ['wrapper']\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\nclass TreeModule {\n  static ɵfac = function TreeModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TreeModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TreeModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [Tree, SharedModule, SharedModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [Tree, SharedModule],\n      exports: [Tree, SharedModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Tree, TreeClasses, TreeModule, TreeStyle, UITreeNode };","map":{"version":3,"names":["i1","CommonModule","i0","Injectable","inject","forwardRef","numberAttribute","booleanAttribute","Input","ViewEncapsulation","Component","EventEmitter","ContentChildren","ViewChild","ContentChild","Output","Optional","ChangeDetectionStrategy","NgModule","i2","FormsModule","find","hasClass","findSingle","focus","removeAccents","resolveFieldData","i3","SharedModule","TranslationKeys","PrimeTemplate","BaseComponent","Checkbox","IconField","ChevronRightIcon","ChevronDownIcon","SpinnerIcon","SearchIcon","InputIcon","InputText","Ripple","Scroller","BaseStyle","i4","AutoFocusModule","_c0","a0","height","_c1","_c2","a1","$implicit","loading","_c3","partialSelected","class","_c4","UITreeNode_Conditional_0_li_0_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","UITreeNode_Conditional_0_li_0_Template_li_drop_0_listener","$event","ɵɵrestoreView","ctx_r2","ɵɵnextContext","ɵɵresetView","onDropPoint","UITreeNode_Conditional_0_li_0_Template_li_dragover_0_listener","onDropPointDragOver","UITreeNode_Conditional_0_li_0_Template_li_dragenter_0_listener","onDropPointDragEnter","UITreeNode_Conditional_0_li_0_Template_li_dragleave_0_listener","onDropPointDragLeave","ɵɵelementEnd","ɵɵproperty","ɵɵpureFunction1","draghoverPrev","ɵɵattribute","UITreeNode_Conditional_0_ng_container_4_ng_container_1_ChevronRightIcon_1_Template","ɵɵelement","UITreeNode_Conditional_0_ng_container_4_ng_container_1_ChevronDownIcon_2_Template","UITreeNode_Conditional_0_ng_container_4_ng_container_1_Template","ɵɵelementContainerStart","ɵɵtemplate","ɵɵelementContainerEnd","ɵɵadvance","node","expanded","UITreeNode_Conditional_0_ng_container_4_ng_container_2_Template","UITreeNode_Conditional_0_ng_container_4_Template","loadingMode","UITreeNode_Conditional_0_span_5_1_ng_template_0_Template","UITreeNode_Conditional_0_span_5_1_Template","UITreeNode_Conditional_0_span_5_Template","tree","togglerIconTemplate","_togglerIconTemplate","ɵɵpureFunction2","UITreeNode_Conditional_0_p_checkbox_6_ng_container_1_ng_template_1_0_ng_template_0_Template","UITreeNode_Conditional_0_p_checkbox_6_ng_container_1_ng_template_1_0_Template","UITreeNode_Conditional_0_p_checkbox_6_ng_container_1_ng_template_1_Template","checkboxIconTemplate","_checkboxIconTemplate","isSelected","UITreeNode_Conditional_0_p_checkbox_6_ng_container_1_Template","ɵɵtemplateRefExtractor","UITreeNode_Conditional_0_p_checkbox_6_Template","_r4","UITreeNode_Conditional_0_p_checkbox_6_Template_p_checkbox_click_0_listener","preventDefault","selectable","config","inputStyle","inputVariant","UITreeNode_Conditional_0_span_7_Template","ɵɵclassMap","getIcon","UITreeNode_Conditional_0_span_9_Template","ɵɵtext","ɵɵtextInterpolate","label","UITreeNode_Conditional_0_span_10_ng_container_1_Template","ɵɵelementContainer","UITreeNode_Conditional_0_span_10_Template","getTemplateForNode","UITreeNode_Conditional_0_ul_11_p_treeNode_1_Template","childNode_r5","firstChild_r6","first","lastChild_r7","last","index_r8","index","itemSize","level","UITreeNode_Conditional_0_ul_11_Template","ɵɵstyleProp","children","trackBy","bind","UITreeNode_Conditional_0_li_12_Template","_r9","UITreeNode_Conditional_0_li_12_Template_li_drop_0_listener","UITreeNode_Conditional_0_li_12_Template_li_dragover_0_listener","UITreeNode_Conditional_0_li_12_Template_li_dragenter_0_listener","UITreeNode_Conditional_0_li_12_Template_li_dragleave_0_listener","draghoverNext","UITreeNode_Conditional_0_Template","_r1","UITreeNode_Conditional_0_Template_li_keydown_1_listener","onKeyDown","UITreeNode_Conditional_0_Template_div_click_2_listener","onNodeClick","UITreeNode_Conditional_0_Template_div_contextmenu_2_listener","onNodeRightClick","UITreeNode_Conditional_0_Template_div_dblclick_2_listener","onNodeDblClick","UITreeNode_Conditional_0_Template_div_touchend_2_listener","onNodeTouchEnd","UITreeNode_Conditional_0_Template_div_drop_2_listener","onDropNode","UITreeNode_Conditional_0_Template_div_dragover_2_listener","onDropNodeDragOver","UITreeNode_Conditional_0_Template_div_dragenter_2_listener","onDropNodeDragEnter","UITreeNode_Conditional_0_Template_div_dragleave_2_listener","onDropNodeDragLeave","UITreeNode_Conditional_0_Template_div_dragstart_2_listener","onDragStart","UITreeNode_Conditional_0_Template_div_dragend_2_listener","onDragStop","UITreeNode_Conditional_0_Template_button_click_3_listener","toggle","droppableNodes","ɵɵstyleMap","style","styleClass","nodeClass","checked","length","selected","key","indentation","nodeContentClass","draggableNodes","selectionMode","icon","expandedIcon","collapsedIcon","virtualScroll","lastChild","_c5","_c6","_c7","_c8","_c9","_c10","_c11","_c12","_c13","_c14","_c15","_c16","_c17","options","Tree_div_1_i_1_Template","ctx_r0","loadingIcon","Tree_div_1_ng_container_2_SpinnerIcon_1_Template","Tree_div_1_ng_container_2_span_2_1_ng_template_0_Template","Tree_div_1_ng_container_2_span_2_1_Template","Tree_div_1_ng_container_2_span_2_Template","loadingIconTemplate","_loadingIconTemplate","Tree_div_1_ng_container_2_Template","Tree_div_1_Template","Tree_ng_container_2_Template","Tree_Conditional_3_ng_container_0_Template","Tree_Conditional_3_Template","filterTemplate","_filterTemplate","filterOptions","Tree_Conditional_4_p_iconField_0_SearchIcon_4_Template","Tree_Conditional_4_p_iconField_0_span_5_1_ng_template_0_Template","Tree_Conditional_4_p_iconField_0_span_5_1_Template","Tree_Conditional_4_p_iconField_0_span_5_Template","filterIconTemplate","_filterIconTemplate","Tree_Conditional_4_p_iconField_0_Template","Tree_Conditional_4_p_iconField_0_Template_input_keydown_enter_1_listener","Tree_Conditional_4_p_iconField_0_Template_input_input_1_listener","_filter","target","value","filterInputAutoFocus","filterPlaceholder","Tree_Conditional_4_Template","filter","Tree_ng_container_5_p_scroller_1_ng_template_2_ul_0_p_treeNode_1_Template","rowNode_r4","firstChild_r5","lastChild_r6","index_r7","scrollerOptions_r8","parent","getIndex","Tree_ng_container_5_p_scroller_1_ng_template_2_ul_0_Template","ctx_r8","items_r10","contentStyle","contentStyleClass","ariaLabel","ariaLabelledBy","Tree_ng_container_5_p_scroller_1_ng_template_2_Template","Tree_ng_container_5_p_scroller_1_ng_container_4_ng_template_1_ng_container_0_Template","Tree_ng_container_5_p_scroller_1_ng_container_4_ng_template_1_Template","scrollerOptions_r11","loaderTemplate","_loaderTemplate","Tree_ng_container_5_p_scroller_1_ng_container_4_Template","Tree_ng_container_5_p_scroller_1_Template","_r3","Tree_ng_container_5_p_scroller_1_Template_p_scroller_onScroll_0_listener","onScroll","emit","Tree_ng_container_5_p_scroller_1_Template_p_scroller_onScrollIndexChange_0_listener","onScrollIndexChange","Tree_ng_container_5_p_scroller_1_Template_p_scroller_onLazyLoad_0_listener","onLazyLoad","scrollHeight","undefined","serializedValue","virtualScrollItemSize","_virtualNodeHeight","lazy","virtualScrollOptions","Tree_ng_container_5_ng_container_2_ul_3_p_treeNode_1_Template","node_r12","firstChild_r13","lastChild_r14","index_r15","Tree_ng_container_5_ng_container_2_ul_3_Template","getRootNode","Tree_ng_container_5_ng_container_2_Template","Tree_ng_container_5_Template","Tree_div_6_ng_container_1_Template","ɵɵtextInterpolate1","emptyMessageLabel","Tree_div_6_2_ng_template_0_Template","Tree_div_6_2_Template","Tree_div_6_Template","emptyMessageTemplate","_emptyMessageTemplate","emptyFilter","Tree_ng_container_7_Template","theme","dt","classes","root","instance","dragHover","mask","pcFilterInput","wrapper","rootChildren","isLeaf","nodeContent","draghoverNode","highlightOnSelect","nodeToggleButton","nodeToggleIcon","nodeCheckbox","nodeIcon","nodeLabel","nodeChildren","TreeStyle","name","ɵfac","ɵTreeStyle_BaseFactory","TreeStyle_Factory","__ngFactoryType__","ɵɵgetInheritedFactory","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","TreeClasses","UITreeNode","ICON_CLASS","rowNode","parentNode","firstChild","Tree","timeout","_componentStyle","ngOnInit","nativeElement","el","pDialogWrapper","closest","setAllNodesTabIndexes","syncNodeOption","getNodeWithKey","isNodeLeaf","event","collapse","expand","stopPropagation","updateSerializedValue","focusVirtualNode","onNodeExpand","originalEvent","onNodeCollapse","onNodeKeydown","isSameNode","currentTarget","position","dragNode","dragNodeIndex","dragNodeScope","isValidDropPointIndex","dragNodeTree","allowDrop","dropParams","createDropPointEventMetadata","validateDrop","onNodeDrop","dropNode","accept","processPointDrop","newNodeList","dragNodeSubNodes","splice","dropIndex","push","dragDropService","stopDrag","subNodes","dataTransfer","dropEffect","draggable","setData","startDrag","scope","draggableScope","droppable","createDropNodeEventMetadata","processNodeDrop","rect","getBoundingClientRect","x","left","width","y","Math","floor","top","contextMenu","containerViewChild","display","code","onArrowDown","onArrowUp","onArrowRight","onArrowLeft","onEnter","nodeElement","getAttribute","parentElement","previousElementSibling","focusRowChange","findLastVisibleDescendant","parentNodeElement","getParentNodeElement","listElement","nextElementSibling","nextSiblingAncestor","findNextSiblingOfAncestor","tabIndex","setTimeout","setTabIndexForSelectionMode","nodeTouched","nodes","hasSelectedNode","some","forEach","selectedNodes","elements","every","element","Array","from","childrenListElement","lastChildElement","tagName","focusNode","firstFocusableRow","currentFocusedRow","lastVisibleDescendant","document","body","data","ɵUITreeNode_BaseFactory","UITreeNode_Factory","ɵcmp","ɵɵdefineComponent","selectors","inputs","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","UITreeNode_Template","ɵɵconditional","dependencies","NgClass","NgForOf","NgIf","NgTemplateOutlet","NgStyle","NgControlStatus","NgModel","encapsulation","args","selector","standalone","imports","None","transform","selection","droppableScope","metaKeySelection","propagateSelectionUp","propagateSelectionDown","emptyMessage","togglerAriaLabel","filterBy","filterMode","filteredNodes","filterLocale","_templateMap","item","virtualNodeHeight","val","console","log","selectionChange","onNodeSelect","onNodeUnselect","onNodeContextMenuSelect","onNodeDoubleClick","onFilter","nodeTemplate","headerTemplate","footerTemplate","filterViewChild","scroller","wrapperViewChild","templates","_headerTemplate","_footerTemplate","ngAfterContentInit","getType","dragStartSubscription","dragStopSubscription","constructor","reset","resetFilter","dragStart$","subscribe","dragStop$","ngOnChanges","simpleChange","hasFilterActive","containerClass","getTranslation","EMPTY_MESSAGE","serializeNodes","visible","eventTarget","includes","hasFilteredNodes","findIndexInSelection","isCheckboxSelectionMode","propagateDown","i","propagateUp","metaSelection","metaKey","ctrlKey","isSingleSelectionMode","isMultipleSelectionMode","className","indexOf","show","areNodesEqual","selectedNode","parentNodes","option","_node","matchedNode","select","selectedCount","childPartialSelected","child","leaf","onDragOver","onDrop","processTreeDrop","onDragEnter","onDragLeave","isValidDragScope","allow","dragScope","dropScope","isArray","s","ds","filterValue","searchFields","split","filterText","toLocaleLowerCase","isStrictMode","copyNode","paramsWithoutNode","findFilteredNodes","isFilterMatched","filteredValue","scrollToVirtualIndex","scrollToIndex","scrollTo","scrollLeft","scrollTop","matched","childNodes","childNode","copyChildNode","params","field","fieldValue","String","getItemOptions","getBlockableElement","ngOnDestroy","unsubscribe","Tree_Factory","ɵɵdirectiveInject","TreeDragDropService","contentQueries","Tree_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","Tree_Query","ɵɵviewQuery","outputs","ɵɵProvidersFeature","ɵɵNgOnChangesFeature","Tree_Template","Tree_Template_div_drop_0_listener","Tree_Template_div_dragover_0_listener","Tree_Template_div_dragenter_0_listener","Tree_Template_div_dragleave_0_listener","tmp_6_0","AutoFocus","changeDetection","Default","providers","decorators","descendants","TreeModule","TreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports"],"sources":["/home/project/node_modules/primeng/fesm2022/primeng-tree.mjs"],"sourcesContent":["import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, inject, forwardRef, numberAttribute, booleanAttribute, Input, ViewEncapsulation, Component, EventEmitter, ContentChildren, ViewChild, ContentChild, Output, Optional, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { find, hasClass, findSingle, focus, removeAccents, resolveFieldData } from '@primeuix/utils';\nimport * as i3 from 'primeng/api';\nimport { SharedModule, TranslationKeys, PrimeTemplate } from 'primeng/api';\nimport { BaseComponent } from 'primeng/basecomponent';\nimport { Checkbox } from 'primeng/checkbox';\nimport { IconField } from 'primeng/iconfield';\nimport { ChevronRightIcon, ChevronDownIcon, SpinnerIcon, SearchIcon } from 'primeng/icons';\nimport { InputIcon } from 'primeng/inputicon';\nimport { InputText } from 'primeng/inputtext';\nimport { Ripple } from 'primeng/ripple';\nimport { Scroller } from 'primeng/scroller';\nimport { BaseStyle } from 'primeng/base';\nimport * as i4 from 'primeng/autofocus';\nimport { AutoFocusModule } from 'primeng/autofocus';\n\nconst theme = ({ dt }) => `\n.p-tree {\n    background: ${dt('tree.background')};\n    color: ${dt('tree.color')};\n    padding: ${dt('tree.padding')};\n}\n\n.p-tree-root-children,\n.p-tree-node-children {\n    display: flex;\n    list-style-type: none;\n    flex-direction: column;\n    margin: 0;\n    gap: ${dt('tree.gap')};\n}\n\n.p-tree-root-children {\n    padding: 0;\n    padding-block-start: ${dt('tree.gap')};\n}\n\n.p-tree-node-children {\n    padding-block-start: ${dt('tree.gap')};\n    padding-inline-start: ${dt('tree.indent')};\n}\n\n.p-tree-node {\n    padding: 0;\n    outline: 0 none;\n}\n\n.p-tree-node-content {\n    border-radius: ${dt('tree.node.border.radius')};\n    padding: ${dt('tree.node.padding')};\n    display: flex;\n    align-items: center;\n    outline-color: transparent;\n    color: ${dt('tree.node.color')};\n    gap: ${dt('tree.node.gap')};\n    transition: background ${dt('tree.transition.duration')}, color ${dt('tree.transition.duration')}, outline-color ${dt('tree.transition.duration')}, box-shadow ${dt('tree.transition.duration')};\n}\n\n.p-tree-node:focus-visible > .p-tree-node-content {\n    box-shadow: ${dt('tree.node.focus.ring.shadow')};\n    outline: ${dt('tree.node.focus.ring.width')} ${dt('tree.node.focus.ring.style')} ${dt('tree.node.focus.ring.color')};\n    outline-offset: ${dt('tree.node.focus.ring.offset')};\n}\n\n.p-tree-node-content.p-tree-node-selectable:not(.p-tree-node-selected):hover {\n    background: ${dt('tree.node.hover.background')};\n    color: ${dt('tree.node.hover.color')};\n}\n\n.p-tree-node-content.p-tree-node-selectable:not(.p-tree-node-selected):hover .p-tree-node-icon {\n    color: ${dt('tree.node.icon.hover.color')};\n}\n\n.p-tree-node-content.p-tree-node-selected {\n    background: ${dt('tree.node.selected.background')};\n    color: ${dt('tree.node.selected.color')};\n}\n\n.p-tree-node-content.p-tree-node-selected .p-tree-node-toggle-button {\n    color: inherit;\n}\n\n.p-tree-node-toggle-button {\n    cursor: pointer;\n    user-select: none;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    position: relative;\n    flex-shrink: 0;\n    width: ${dt('tree.node.toggle.button.size')};\n    height: ${dt('tree.node.toggle.button.size')};\n    color: ${dt('tree.node.toggle.button.color')};\n    border: 0 none;\n    background: transparent;\n    border-radius: ${dt('tree.node.toggle.button.border.radius')};\n    transition: background ${dt('tree.transition.duration')}, color ${dt('tree.transition.duration')}, border-color ${dt('tree.transition.duration')}, outline-color ${dt('tree.transition.duration')}, box-shadow ${dt('tree.transition.duration')};\n    outline-color: transparent;\n    padding: 0;\n}\n\n.p-tree-node-toggle-button:enabled:hover {\n    background: ${dt('tree.node.toggle.button.hover.background')};\n    color: ${dt('tree.node.toggle.button.hover.color')};\n}\n\n.p-tree-node-content.p-tree-node-selected .p-tree-node-toggle-button:hover {\n    background: ${dt('tree.node.toggle.button.selected.hover.background')};\n    color: ${dt('tree.node.toggle.button.selected.hover.color')};\n}\n\n.p-tree-root {\n    overflow: auto;\n}\n\n.p-tree-node-selectable {\n    cursor: pointer;\n    user-select: none;\n}\n\n.p-tree-node-leaf > .p-tree-node-content .p-tree-node-toggle-button {\n    visibility: hidden;\n}\n\n.p-tree-node-icon {\n    color: ${dt('tree.node.icon.color')};\n    transition: color ${dt('tree.transition.duration')};\n}\n\n.p-tree-node-content.p-tree-node-selected .p-tree-node-icon {\n    color: ${dt('tree.node.icon.selected.color')};\n}\n\n.p-tree-filter-input {\n    width: 100%;\n}\n\n.p-tree-loading {\n    position: relative;\n    height: 100%;\n}\n\n.p-tree-loading-icon {\n    font-size: ${dt('tree.loading.icon.size')};\n    width: ${dt('tree.loading.icon.size')};\n    height: ${dt('tree.loading.icon.size')};\n}\n\n.p-tree .p-tree-mask {\n    position: absolute;\n    z-index: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.p-tree-flex-scrollable {\n    display: flex;\n    flex: 1;\n    height: 100%;\n    flex-direction: column;\n}\n\n.p-tree-flex-scrollable .p-tree-root {\n    flex: 1;\n}\n\n/* For PrimeNG */\n.p-tree .p-tree-node-droppoint {\n    height: 4px;\n    list-style-type: none;\n}\n\n.p-tree .p-tree-node-droppoint-active {\n    border: 0 none;\n    background-color: ${dt('primary.color')};\n}\n\n.p-tree-node-content.p-tree-node-dragover {\n    background: ${dt('tree.node.hover.background')};\n    color: ${dt('tree.node.hover.color')};\n}\n\n.p-tree-node-content.p-tree-node-dragover .p-tree-node-icon {\n    color: ${dt('tree.node.icon.hover.color')};\n}\n\n.p-tree-horizontal {\n    width: auto;\n    padding-inline-start: 0;\n    padding-inline-end: 0;\n    overflow: auto;\n}\n\n.p-tree.p-tree-horizontal table,\n.p-tree.p-tree-horizontal tr,\n.p-tree.p-tree-horizontal td {\n    border-collapse: collapse;\n    margin: 0;\n    padding: 0;\n    vertical-align: middle;\n}\n\n.p-tree-horizontal .p-tree-node-content {\n    font-weight: normal;\n    padding: 0.4em 1em 0.4em 0.2em;\n    display: flex;\n    align-items: center;\n}\n\n.p-tree-horizontal .p-tree-node-parent .p-tree-node-content {\n    font-weight: normal;\n    white-space: nowrap;\n}\n\n.p-tree.p-tree-horizontal .p-tree-node.p-tree-node-leaf,\n.p-tree.p-tree-horizontal .p-tree-node.p-tree-node-collapsed {\n    padding-inline-end: 0;\n}\n\n.p-tree.p-tree-horizontal .p-tree-node-children {\n    padding: 0;\n    margin: 0;\n}\n\n.p-tree.p-tree-horizontal .p-tree-node-connector {\n    width: 1px;\n}\n\n.p-tree.p-tree-horizontal .p-tree-node-connector-table {\n    height: 100%;\n    width: 1px;\n}\n\n.p-tree.p-tree-horizontal table {\n    height: 0;\n}\n`;\nconst classes = {\n    root: ({ instance }) => ({\n        'p-tree p-component': true,\n        'p-tree-selectable': instance.selectionMode != null,\n        'p-tree-loading': instance.loading,\n        'p-tree-flex-scrollable': instance.scrollHeight === 'flex',\n        'p-tree-node-dragover': instance.dragHover\n    }),\n    mask: 'p-tree-mask p-overlay-mask',\n    loadingIcon: 'p-tree-loading-icon',\n    pcFilterInput: 'p-tree-filter-input',\n    wrapper: 'p-tree-root', //TODO: discuss\n    rootChildren: 'p-tree-root-children',\n    node: ({ instance }) => ({ 'p-tree-node': true, 'p-tree-node-leaf': instance.isLeaf() }),\n    nodeContent: ({ instance }) => ({\n        'p-tree-node-content': true,\n        [instance.styleClass]: !!instance.styleClass,\n        'p-tree-node-selectable': instance.selectable,\n        'p-tree-node-dragover': instance.draghoverNode,\n        'p-tree-node-selected': instance.selectionMode === 'checkbox' && instance.tree.highlightOnSelect ? instance.checked : instance.selected\n    }),\n    nodeToggleButton: 'p-tree-node-toggle-button',\n    nodeToggleIcon: 'p-tree-node-toggle-icon',\n    nodeCheckbox: 'p-tree-node-checkbox',\n    nodeIcon: 'p-tree-node-icon',\n    nodeLabel: 'p-tree-node-label',\n    nodeChildren: 'p-tree-node-children'\n};\nclass TreeStyle extends BaseStyle {\n    name = 'tree';\n    theme = theme;\n    classes = classes;\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.10\", ngImport: i0, type: TreeStyle, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.10\", ngImport: i0, type: TreeStyle });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.10\", ngImport: i0, type: TreeStyle, decorators: [{\n            type: Injectable\n        }] });\n/**\n *\n * Tree is used to display hierarchical data.\n *\n * [Live Demo](https://www.primeng.org/tree/)\n *\n * @module treestyle\n *\n */\nvar TreeClasses;\n(function (TreeClasses) {\n    /**\n     * Class name of the root element\n     */\n    TreeClasses[\"root\"] = \"p-tree\";\n    /**\n     * Class name of the mask element\n     */\n    TreeClasses[\"mask\"] = \"p-tree-mask\";\n    /**\n     * Class name of the loading icon element\n     */\n    TreeClasses[\"loadingIcon\"] = \"p-tree-loading-icon\";\n    /**\n     * Class name of the filter input element\n     */\n    TreeClasses[\"pcFilterInput\"] = \"p-tree-filter-input\";\n    /**\n     * Class name of the wrapper element\n     */\n    TreeClasses[\"wrapper\"] = \"p-tree-root\";\n    /**\n     * Class name of the root children element\n     */\n    TreeClasses[\"rootChildren\"] = \"p-tree-root-children\";\n    /**\n     * Class name of the node element\n     */\n    TreeClasses[\"node\"] = \"p-tree-node\";\n    /**\n     * Class name of the node content element\n     */\n    TreeClasses[\"nodeContent\"] = \"p-tree-node-content\";\n    /**\n     * Class name of the node toggle button element\n     */\n    TreeClasses[\"nodeToggleButton\"] = \"p-tree-node-toggle-button\";\n    /**\n     * Class name of the node toggle icon element\n     */\n    TreeClasses[\"nodeToggleIcon\"] = \"p-tree-node-toggle-icon\";\n    /**\n     * Class name of the node checkbox element\n     */\n    TreeClasses[\"nodeCheckbox\"] = \"p-tree-node-checkbox\";\n    /**\n     * Class name of the node icon element\n     */\n    TreeClasses[\"nodeIcon\"] = \"p-tree-node-icon\";\n    /**\n     * Class name of the node label element\n     */\n    TreeClasses[\"nodeLabel\"] = \"p-tree-node-label\";\n    /**\n     * Class name of the node children element\n     */\n    TreeClasses[\"nodeChildren\"] = \"p-tree-node-children\";\n})(TreeClasses || (TreeClasses = {}));\n\nclass UITreeNode extends BaseComponent {\n    static ICON_CLASS = 'p-tree-node-icon ';\n    rowNode;\n    node;\n    parentNode;\n    root;\n    index;\n    firstChild;\n    lastChild;\n    level;\n    indentation;\n    itemSize;\n    loadingMode;\n    tree = inject(forwardRef(() => Tree));\n    timeout;\n    draghoverPrev;\n    draghoverNext;\n    draghoverNode;\n    get selected() {\n        return this.tree.selectionMode === 'single' || this.tree.selectionMode === 'multiple' ? this.isSelected() : undefined;\n    }\n    get checked() {\n        return this.tree.selectionMode === 'checkbox' ? this.isSelected() : undefined;\n    }\n    get nodeClass() {\n        return this.tree._componentStyle.classes.node({ instance: this });\n    }\n    get nodeContentClass() {\n        return this.tree._componentStyle.classes.nodeContent({ instance: this });\n    }\n    get selectable() {\n        return this.node.selectable === false ? false : this.tree.selectionMode != null;\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this.node.parent = this.parentNode;\n        const nativeElement = this.tree.el.nativeElement;\n        const pDialogWrapper = nativeElement.closest('p-dialog');\n        if (this.parentNode && !pDialogWrapper) {\n            this.setAllNodesTabIndexes();\n            this.tree.syncNodeOption(this.node, this.tree.value, 'parent', this.tree.getNodeWithKey(this.parentNode.key, this.tree.value));\n        }\n    }\n    getIcon() {\n        let icon;\n        if (this.node.icon)\n            icon = this.node.icon;\n        else\n            icon = this.node.expanded && this.node.children && this.node.children?.length ? this.node.expandedIcon : this.node.collapsedIcon;\n        return UITreeNode.ICON_CLASS + ' ' + icon + ' p-tree-node-icon';\n    }\n    isLeaf() {\n        return this.tree.isNodeLeaf(this.node);\n    }\n    toggle(event) {\n        if (this.node.expanded)\n            this.collapse(event);\n        else\n            this.expand(event);\n        event.stopPropagation();\n    }\n    expand(event) {\n        this.node.expanded = true;\n        if (this.tree.virtualScroll) {\n            this.tree.updateSerializedValue();\n            this.focusVirtualNode();\n        }\n        this.tree.onNodeExpand.emit({ originalEvent: event, node: this.node });\n    }\n    collapse(event) {\n        this.node.expanded = false;\n        if (this.tree.virtualScroll) {\n            this.tree.updateSerializedValue();\n            this.focusVirtualNode();\n        }\n        this.tree.onNodeCollapse.emit({ originalEvent: event, node: this.node });\n    }\n    onNodeClick(event) {\n        this.tree.onNodeClick(event, this.node);\n    }\n    onNodeKeydown(event) {\n        if (event.key === 'Enter') {\n            this.tree.onNodeClick(event, this.node);\n        }\n    }\n    onNodeTouchEnd() {\n        this.tree.onNodeTouchEnd();\n    }\n    onNodeRightClick(event) {\n        this.tree.onNodeRightClick(event, this.node);\n    }\n    onNodeDblClick(event) {\n        this.tree.onNodeDblClick(event, this.node);\n    }\n    isSelected() {\n        return this.tree.isSelected(this.node);\n    }\n    isSameNode(event) {\n        return event.currentTarget && (event.currentTarget.isSameNode(event.target) || event.currentTarget.isSameNode(event.target.closest('[role=\"treeitem\"]')));\n    }\n    onDropPoint(event, position) {\n        event.preventDefault();\n        let dragNode = this.tree.dragNode;\n        let dragNodeIndex = this.tree.dragNodeIndex;\n        let dragNodeScope = this.tree.dragNodeScope;\n        let isValidDropPointIndex = this.tree.dragNodeTree === this.tree ? position === 1 || dragNodeIndex !== this.index - 1 : true;\n        if (this.tree.allowDrop(dragNode, this.node, dragNodeScope) && isValidDropPointIndex) {\n            let dropParams = { ...this.createDropPointEventMetadata(position) };\n            if (this.tree.validateDrop) {\n                this.tree.onNodeDrop.emit({\n                    originalEvent: event,\n                    dragNode: dragNode,\n                    dropNode: this.node,\n                    index: this.index,\n                    accept: () => {\n                        this.processPointDrop(dropParams);\n                    }\n                });\n            }\n            else {\n                this.processPointDrop(dropParams);\n                this.tree.onNodeDrop.emit({\n                    originalEvent: event,\n                    dragNode: dragNode,\n                    dropNode: this.node,\n                    index: this.index\n                });\n            }\n        }\n        this.draghoverPrev = false;\n        this.draghoverNext = false;\n    }\n    processPointDrop(event) {\n        let newNodeList = event.dropNode.parent ? event.dropNode.parent.children : this.tree.value;\n        event.dragNodeSubNodes.splice(event.dragNodeIndex, 1);\n        let dropIndex = this.index;\n        if (event.position < 0) {\n            dropIndex = event.dragNodeSubNodes === newNodeList ? (event.dragNodeIndex > event.index ? event.index : event.index - 1) : event.index;\n            newNodeList.splice(dropIndex, 0, event.dragNode);\n        }\n        else {\n            dropIndex = newNodeList.length;\n            newNodeList.push(event.dragNode);\n        }\n        this.tree.dragDropService.stopDrag({\n            node: event.dragNode,\n            subNodes: event.dropNode.parent ? event.dropNode.parent.children : this.tree.value,\n            index: event.dragNodeIndex\n        });\n    }\n    createDropPointEventMetadata(position) {\n        return {\n            dragNode: this.tree.dragNode,\n            dragNodeIndex: this.tree.dragNodeIndex,\n            dragNodeSubNodes: this.tree.dragNodeSubNodes,\n            dropNode: this.node,\n            index: this.index,\n            position: position\n        };\n    }\n    onDropPointDragOver(event) {\n        event.dataTransfer.dropEffect = 'move';\n        event.preventDefault();\n    }\n    onDropPointDragEnter(event, position) {\n        if (this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n            if (position < 0)\n                this.draghoverPrev = true;\n            else\n                this.draghoverNext = true;\n        }\n    }\n    onDropPointDragLeave(event) {\n        this.draghoverPrev = false;\n        this.draghoverNext = false;\n    }\n    onDragStart(event) {\n        if (this.tree.draggableNodes && this.node.draggable !== false) {\n            event.dataTransfer.setData('text', 'data');\n            this.tree.dragDropService.startDrag({\n                tree: this,\n                node: this.node,\n                subNodes: this.node?.parent ? this.node.parent.children : this.tree.value,\n                index: this.index,\n                scope: this.tree.draggableScope\n            });\n        }\n        else {\n            event.preventDefault();\n        }\n    }\n    onDragStop(event) {\n        this.tree.dragDropService.stopDrag({\n            node: this.node,\n            subNodes: this.node?.parent ? this.node.parent.children : this.tree.value,\n            index: this.index\n        });\n    }\n    onDropNodeDragOver(event) {\n        event.dataTransfer.dropEffect = 'move';\n        if (this.tree.droppableNodes) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    onDropNode(event) {\n        if (this.tree.droppableNodes && this.node?.droppable !== false) {\n            let dragNode = this.tree.dragNode;\n            if (this.tree.allowDrop(dragNode, this.node, this.tree.dragNodeScope)) {\n                let dropParams = { ...this.createDropNodeEventMetadata() };\n                if (this.tree.validateDrop) {\n                    this.tree.onNodeDrop.emit({\n                        originalEvent: event,\n                        dragNode: dragNode,\n                        dropNode: this.node,\n                        index: this.index,\n                        accept: () => {\n                            this.processNodeDrop(dropParams);\n                        }\n                    });\n                }\n                else {\n                    this.processNodeDrop(dropParams);\n                    this.tree.onNodeDrop.emit({\n                        originalEvent: event,\n                        dragNode: dragNode,\n                        dropNode: this.node,\n                        index: this.index\n                    });\n                }\n            }\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        this.draghoverNode = false;\n    }\n    createDropNodeEventMetadata() {\n        return {\n            dragNode: this.tree.dragNode,\n            dragNodeIndex: this.tree.dragNodeIndex,\n            dragNodeSubNodes: this.tree.dragNodeSubNodes,\n            dropNode: this.node\n        };\n    }\n    processNodeDrop(event) {\n        let dragNodeIndex = event.dragNodeIndex;\n        event.dragNodeSubNodes.splice(dragNodeIndex, 1);\n        if (event.dropNode.children)\n            event.dropNode.children.push(event.dragNode);\n        else\n            event.dropNode.children = [event.dragNode];\n        this.tree.dragDropService.stopDrag({\n            node: event.dragNode,\n            subNodes: event.dropNode.parent ? event.dropNode.parent.children : this.tree.value,\n            index: dragNodeIndex\n        });\n    }\n    onDropNodeDragEnter(event) {\n        if (this.tree.droppableNodes && this.node?.droppable !== false && this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n            this.draghoverNode = true;\n        }\n    }\n    onDropNodeDragLeave(event) {\n        if (this.tree.droppableNodes) {\n            let rect = event.currentTarget.getBoundingClientRect();\n            if (event.x > rect.left + rect.width || event.x < rect.left || event.y >= Math.floor(rect.top + rect.height) || event.y < rect.top) {\n                this.draghoverNode = false;\n            }\n        }\n    }\n    onKeyDown(event) {\n        if (!this.isSameNode(event) || (this.tree.contextMenu && this.tree.contextMenu.containerViewChild?.nativeElement.style.display === 'block')) {\n            return;\n        }\n        switch (event.code) {\n            //down arrow\n            case 'ArrowDown':\n                this.onArrowDown(event);\n                break;\n            //up arrow\n            case 'ArrowUp':\n                this.onArrowUp(event);\n                break;\n            //right arrow\n            case 'ArrowRight':\n                this.onArrowRight(event);\n                break;\n            //left arrow\n            case 'ArrowLeft':\n                this.onArrowLeft(event);\n                break;\n            //enter\n            case 'Enter':\n            case 'Space':\n            case 'NumpadEnter':\n                this.onEnter(event);\n                break;\n            //tab\n            case 'Tab':\n                this.setAllNodesTabIndexes();\n                break;\n            default:\n                //no op\n                break;\n        }\n    }\n    onArrowUp(event) {\n        const nodeElement = event.target.getAttribute('data-pc-section') === 'toggler' ? event.target.closest('[role=\"treeitem\"]') : event.target.parentElement;\n        if (nodeElement.previousElementSibling) {\n            this.focusRowChange(nodeElement, nodeElement.previousElementSibling, this.findLastVisibleDescendant(nodeElement.previousElementSibling));\n        }\n        else {\n            let parentNodeElement = this.getParentNodeElement(nodeElement);\n            if (parentNodeElement) {\n                this.focusRowChange(nodeElement, parentNodeElement);\n            }\n        }\n        event.preventDefault();\n    }\n    onArrowDown(event) {\n        const nodeElement = event.target.getAttribute('data-pc-section') === 'toggler' ? event.target.closest('[role=\"treeitem\"]') : event.target;\n        const listElement = nodeElement.children[1];\n        if (listElement && listElement.children.length > 0) {\n            this.focusRowChange(nodeElement, listElement.children[0]);\n        }\n        else {\n            if (nodeElement.parentElement.nextElementSibling) {\n                this.focusRowChange(nodeElement, nodeElement.parentElement.nextElementSibling);\n            }\n            else {\n                let nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement.parentElement);\n                if (nextSiblingAncestor) {\n                    this.focusRowChange(nodeElement, nextSiblingAncestor);\n                }\n            }\n        }\n        event.preventDefault();\n    }\n    onArrowRight(event) {\n        if (!this.node?.expanded && !this.tree.isNodeLeaf(this.node)) {\n            this.expand(event);\n            event.currentTarget.tabIndex = -1;\n            setTimeout(() => {\n                this.onArrowDown(event);\n            }, 1);\n        }\n        event.preventDefault();\n    }\n    onArrowLeft(event) {\n        const nodeElement = event.target.getAttribute('data-pc-section') === 'toggler' ? event.target.closest('[role=\"treeitem\"]') : event.target;\n        if (this.level === 0 && !this.node?.expanded) {\n            return false;\n        }\n        if (this.node?.expanded) {\n            this.collapse(event);\n            return;\n        }\n        let parentNodeElement = this.getParentNodeElement(nodeElement.parentElement);\n        if (parentNodeElement) {\n            this.focusRowChange(event.currentTarget, parentNodeElement);\n        }\n        event.preventDefault();\n    }\n    onEnter(event) {\n        this.tree.onNodeClick(event, this.node);\n        this.setTabIndexForSelectionMode(event, this.tree.nodeTouched);\n        event.preventDefault();\n    }\n    setAllNodesTabIndexes() {\n        const nodes = find(this.tree.el.nativeElement, '.p-tree-node');\n        const hasSelectedNode = [...nodes].some((node) => node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true');\n        [...nodes].forEach((node) => {\n            node.tabIndex = -1;\n        });\n        if (hasSelectedNode) {\n            const selectedNodes = [...nodes].filter((node) => node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true');\n            selectedNodes[0].tabIndex = 0;\n            return;\n        }\n        if (nodes.length) {\n            [...nodes][0].tabIndex = 0;\n        }\n    }\n    setTabIndexForSelectionMode(event, nodeTouched) {\n        if (this.tree.selectionMode !== null) {\n            const elements = [...find(this.tree.el.nativeElement, '[role=\"treeitem\"]')];\n            event.currentTarget.tabIndex = nodeTouched === false ? -1 : 0;\n            if (elements.every((element) => element.tabIndex === -1)) {\n                elements[0].tabIndex = 0;\n            }\n        }\n    }\n    findNextSiblingOfAncestor(nodeElement) {\n        let parentNodeElement = this.getParentNodeElement(nodeElement);\n        if (parentNodeElement) {\n            if (parentNodeElement.nextElementSibling)\n                return parentNodeElement.nextElementSibling;\n            else\n                return this.findNextSiblingOfAncestor(parentNodeElement);\n        }\n        else {\n            return null;\n        }\n    }\n    findLastVisibleDescendant(nodeElement) {\n        const listElement = Array.from(nodeElement.children).find((el) => hasClass(el, 'p-tree-node'));\n        const childrenListElement = listElement?.children[1];\n        if (childrenListElement && childrenListElement.children.length > 0) {\n            const lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\n            return this.findLastVisibleDescendant(lastChildElement);\n        }\n        else {\n            return nodeElement;\n        }\n    }\n    getParentNodeElement(nodeElement) {\n        const parentNodeElement = nodeElement.parentElement?.parentElement?.parentElement;\n        return parentNodeElement?.tagName === 'P-TREENODE' ? parentNodeElement : null;\n    }\n    focusNode(element) {\n        if (this.tree.droppableNodes)\n            element.children[1].focus();\n        else\n            element.children[0].focus();\n    }\n    focusRowChange(firstFocusableRow, currentFocusedRow, lastVisibleDescendant) {\n        firstFocusableRow.tabIndex = '-1';\n        currentFocusedRow.children[0].tabIndex = '0';\n        this.focusNode(lastVisibleDescendant || currentFocusedRow);\n    }\n    focusVirtualNode() {\n        this.timeout = setTimeout(() => {\n            let node = findSingle(document.body, `[data-id=\"${this.node?.key ?? this.node?.data}\"]`);\n            focus(node);\n        }, 1);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.10\", ngImport: i0, type: UITreeNode, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.2.10\", type: UITreeNode, isStandalone: true, selector: \"p-treeNode\", inputs: { rowNode: \"rowNode\", node: \"node\", parentNode: \"parentNode\", root: [\"root\", \"root\", booleanAttribute], index: [\"index\", \"index\", numberAttribute], firstChild: [\"firstChild\", \"firstChild\", booleanAttribute], lastChild: [\"lastChild\", \"lastChild\", booleanAttribute], level: [\"level\", \"level\", numberAttribute], indentation: [\"indentation\", \"indentation\", numberAttribute], itemSize: [\"itemSize\", \"itemSize\", numberAttribute], loadingMode: \"loadingMode\" }, usesInheritance: true, ngImport: i0, template: `\n        @if (node) {\n            <li\n                *ngIf=\"tree.droppableNodes\"\n                class=\"p-tree-node-droppoint\"\n                [attr.aria-hidden]=\"true\"\n                [ngClass]=\"{ 'p-tree-node-droppoint-active': draghoverPrev }\"\n                (drop)=\"onDropPoint($event, -1)\"\n                (dragover)=\"onDropPointDragOver($event)\"\n                (dragenter)=\"onDropPointDragEnter($event, -1)\"\n                (dragleave)=\"onDropPointDragLeave($event)\"\n            ></li>\n            <li\n                [ngClass]=\"nodeClass\"\n                [class]=\"node.styleClass\"\n                [ngStyle]=\"{ height: itemSize + 'px' }\"\n                [style]=\"node.style\"\n                [attr.aria-label]=\"node.label\"\n                [attr.aria-checked]=\"checked\"\n                [attr.aria-setsize]=\"node.children ? node.children.length : 0\"\n                [attr.aria-selected]=\"selected\"\n                [attr.aria-expanded]=\"node.expanded\"\n                [attr.aria-posinset]=\"index + 1\"\n                [attr.aria-level]=\"level + 1\"\n                [attr.tabindex]=\"index === 0 ? 0 : -1\"\n                [attr.data-id]=\"node.key\"\n                role=\"treeitem\"\n                (keydown)=\"onKeyDown($event)\"\n            >\n                <div\n                    [ngClass]=\"nodeContentClass\"\n                    [style.paddingLeft]=\"level * indentation + 'rem'\"\n                    (click)=\"onNodeClick($event)\"\n                    (contextmenu)=\"onNodeRightClick($event)\"\n                    (dblclick)=\"onNodeDblClick($event)\"\n                    (touchend)=\"onNodeTouchEnd()\"\n                    (drop)=\"onDropNode($event)\"\n                    (dragover)=\"onDropNodeDragOver($event)\"\n                    (dragenter)=\"onDropNodeDragEnter($event)\"\n                    (dragleave)=\"onDropNodeDragLeave($event)\"\n                    [draggable]=\"tree.draggableNodes\"\n                    (dragstart)=\"onDragStart($event)\"\n                    (dragend)=\"onDragStop($event)\"\n                >\n                    <button type=\"button\" [attr.data-pc-section]=\"'toggler'\" class=\"p-tree-node-toggle-button\" (click)=\"toggle($event)\" pRipple tabindex=\"-1\">\n                        <ng-container *ngIf=\"!tree.togglerIconTemplate && !tree._togglerIconTemplate\">\n                            <ng-container *ngIf=\"!node.loading\">\n                                <ChevronRightIcon *ngIf=\"!node.expanded\" [styleClass]=\"'p-tree-node-toggle-icon'\" />\n                                <ChevronDownIcon *ngIf=\"node.expanded\" [styleClass]=\"'p-tree-node-toggle-icon'\" />\n                            </ng-container>\n                            <ng-container *ngIf=\"loadingMode === 'icon' && node.loading\">\n                                <SpinnerIcon [styleClass]=\"'pi-spin p-tree-node-toggle-icon'\" />\n                            </ng-container>\n                        </ng-container>\n                        <span *ngIf=\"tree.togglerIconTemplate || tree._togglerIconTemplate\" class=\"p-tree-node-toggle-icon\">\n                            <ng-template *ngTemplateOutlet=\"tree.togglerIconTemplate || tree._togglerIconTemplate; context: { $implicit: node.expanded, loading: node.loading }\"></ng-template>\n                        </span>\n                    </button>\n\n                    <p-checkbox\n                        [ngModel]=\"isSelected()\"\n                        styleClass=\"p-tree-node-checkbox\"\n                        [binary]=\"true\"\n                        [indeterminate]=\"node.partialSelected\"\n                        *ngIf=\"tree.selectionMode == 'checkbox'\"\n                        [disabled]=\"node.selectable === false\"\n                        [variant]=\"tree?.config.inputStyle() === 'filled' || tree?.config.inputVariant() === 'filled' ? 'filled' : 'outlined'\"\n                        [attr.data-p-partialchecked]=\"node.partialSelected\"\n                        [tabindex]=\"-1\"\n                        (click)=\"$event.preventDefault()\"\n                    >\n                        <ng-container *ngIf=\"tree.checkboxIconTemplate || tree._checkboxIconTemplate\">\n                            <ng-template #icon>\n                                <ng-template\n                                    *ngTemplateOutlet=\"\n                                        tree.checkboxIconTemplate || tree._checkboxIconTemplate;\n                                        context: {\n                                            $implicit: isSelected(),\n                                            partialSelected: node.partialSelected,\n                                            class: 'p-tree-node-checkbox'\n                                        }\n                                    \"\n                                ></ng-template>\n                            </ng-template>\n                        </ng-container>\n                    </p-checkbox>\n\n                    <span [class]=\"getIcon()\" *ngIf=\"node.icon || node.expandedIcon || node.collapsedIcon\"></span>\n                    <span class=\"p-tree-node-label\">\n                        <span *ngIf=\"!tree.getTemplateForNode(node)\">{{ node.label }}</span>\n                        <span *ngIf=\"tree.getTemplateForNode(node)\">\n                            <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: { $implicit: node }\"></ng-container>\n                        </span>\n                    </span>\n                </div>\n                <ul class=\"p-tree-node-children\" style=\"display: none;\" *ngIf=\"!tree.virtualScroll && node.children && node.expanded\" [style.display]=\"node.expanded ? 'flex' : 'none'\" role=\"group\">\n                    <p-treeNode\n                        *ngFor=\"let childNode of node.children; let firstChild = first; let lastChild = last; let index = index; trackBy: tree.trackBy.bind(this)\"\n                        [node]=\"childNode\"\n                        [parentNode]=\"node\"\n                        [firstChild]=\"firstChild\"\n                        [lastChild]=\"lastChild\"\n                        [index]=\"index\"\n                        [itemSize]=\"itemSize\"\n                        [level]=\"level + 1\"\n                        [loadingMode]=\"loadingMode\"\n                    ></p-treeNode>\n                </ul>\n            </li>\n\n            <li\n                *ngIf=\"tree.droppableNodes && lastChild\"\n                class=\"p-tree-node-droppoint\"\n                [ngClass]=\"{ 'p-tree-node-droppoint-active': draghoverNext }\"\n                (drop)=\"onDropPoint($event, 1)\"\n                [attr.aria-hidden]=\"true\"\n                (dragover)=\"onDropPointDragOver($event)\"\n                (dragenter)=\"onDropPointDragEnter($event, 1)\"\n                (dragleave)=\"onDropPointDragLeave($event)\"\n            ></li>\n        }\n    `, isInline: true, dependencies: [{ kind: \"component\", type: UITreeNode, selector: \"p-treeNode\", inputs: [\"rowNode\", \"node\", \"parentNode\", \"root\", \"index\", \"firstChild\", \"lastChild\", \"level\", \"indentation\", \"itemSize\", \"loadingMode\"] }, { kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"directive\", type: Ripple, selector: \"[pRipple]\" }, { kind: \"component\", type: Checkbox, selector: \"p-checkbox, p-checkBox, p-check-box\", inputs: [\"value\", \"name\", \"disabled\", \"binary\", \"ariaLabelledBy\", \"ariaLabel\", \"tabindex\", \"inputId\", \"style\", \"inputStyle\", \"styleClass\", \"inputClass\", \"indeterminate\", \"size\", \"formControl\", \"checkboxIcon\", \"readonly\", \"required\", \"autofocus\", \"trueValue\", \"falseValue\", \"variant\"], outputs: [\"onChange\", \"onFocus\", \"onBlur\"] }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: ChevronRightIcon, selector: \"ChevronRightIcon\" }, { kind: \"component\", type: ChevronDownIcon, selector: \"ChevronDownIcon\" }, { kind: \"component\", type: SpinnerIcon, selector: \"SpinnerIcon\" }, { kind: \"ngmodule\", type: SharedModule }], encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.10\", ngImport: i0, type: UITreeNode, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeNode',\n                    standalone: true,\n                    imports: [CommonModule, Ripple, Checkbox, FormsModule, ChevronRightIcon, ChevronDownIcon, SpinnerIcon, SharedModule],\n                    template: `\n        @if (node) {\n            <li\n                *ngIf=\"tree.droppableNodes\"\n                class=\"p-tree-node-droppoint\"\n                [attr.aria-hidden]=\"true\"\n                [ngClass]=\"{ 'p-tree-node-droppoint-active': draghoverPrev }\"\n                (drop)=\"onDropPoint($event, -1)\"\n                (dragover)=\"onDropPointDragOver($event)\"\n                (dragenter)=\"onDropPointDragEnter($event, -1)\"\n                (dragleave)=\"onDropPointDragLeave($event)\"\n            ></li>\n            <li\n                [ngClass]=\"nodeClass\"\n                [class]=\"node.styleClass\"\n                [ngStyle]=\"{ height: itemSize + 'px' }\"\n                [style]=\"node.style\"\n                [attr.aria-label]=\"node.label\"\n                [attr.aria-checked]=\"checked\"\n                [attr.aria-setsize]=\"node.children ? node.children.length : 0\"\n                [attr.aria-selected]=\"selected\"\n                [attr.aria-expanded]=\"node.expanded\"\n                [attr.aria-posinset]=\"index + 1\"\n                [attr.aria-level]=\"level + 1\"\n                [attr.tabindex]=\"index === 0 ? 0 : -1\"\n                [attr.data-id]=\"node.key\"\n                role=\"treeitem\"\n                (keydown)=\"onKeyDown($event)\"\n            >\n                <div\n                    [ngClass]=\"nodeContentClass\"\n                    [style.paddingLeft]=\"level * indentation + 'rem'\"\n                    (click)=\"onNodeClick($event)\"\n                    (contextmenu)=\"onNodeRightClick($event)\"\n                    (dblclick)=\"onNodeDblClick($event)\"\n                    (touchend)=\"onNodeTouchEnd()\"\n                    (drop)=\"onDropNode($event)\"\n                    (dragover)=\"onDropNodeDragOver($event)\"\n                    (dragenter)=\"onDropNodeDragEnter($event)\"\n                    (dragleave)=\"onDropNodeDragLeave($event)\"\n                    [draggable]=\"tree.draggableNodes\"\n                    (dragstart)=\"onDragStart($event)\"\n                    (dragend)=\"onDragStop($event)\"\n                >\n                    <button type=\"button\" [attr.data-pc-section]=\"'toggler'\" class=\"p-tree-node-toggle-button\" (click)=\"toggle($event)\" pRipple tabindex=\"-1\">\n                        <ng-container *ngIf=\"!tree.togglerIconTemplate && !tree._togglerIconTemplate\">\n                            <ng-container *ngIf=\"!node.loading\">\n                                <ChevronRightIcon *ngIf=\"!node.expanded\" [styleClass]=\"'p-tree-node-toggle-icon'\" />\n                                <ChevronDownIcon *ngIf=\"node.expanded\" [styleClass]=\"'p-tree-node-toggle-icon'\" />\n                            </ng-container>\n                            <ng-container *ngIf=\"loadingMode === 'icon' && node.loading\">\n                                <SpinnerIcon [styleClass]=\"'pi-spin p-tree-node-toggle-icon'\" />\n                            </ng-container>\n                        </ng-container>\n                        <span *ngIf=\"tree.togglerIconTemplate || tree._togglerIconTemplate\" class=\"p-tree-node-toggle-icon\">\n                            <ng-template *ngTemplateOutlet=\"tree.togglerIconTemplate || tree._togglerIconTemplate; context: { $implicit: node.expanded, loading: node.loading }\"></ng-template>\n                        </span>\n                    </button>\n\n                    <p-checkbox\n                        [ngModel]=\"isSelected()\"\n                        styleClass=\"p-tree-node-checkbox\"\n                        [binary]=\"true\"\n                        [indeterminate]=\"node.partialSelected\"\n                        *ngIf=\"tree.selectionMode == 'checkbox'\"\n                        [disabled]=\"node.selectable === false\"\n                        [variant]=\"tree?.config.inputStyle() === 'filled' || tree?.config.inputVariant() === 'filled' ? 'filled' : 'outlined'\"\n                        [attr.data-p-partialchecked]=\"node.partialSelected\"\n                        [tabindex]=\"-1\"\n                        (click)=\"$event.preventDefault()\"\n                    >\n                        <ng-container *ngIf=\"tree.checkboxIconTemplate || tree._checkboxIconTemplate\">\n                            <ng-template #icon>\n                                <ng-template\n                                    *ngTemplateOutlet=\"\n                                        tree.checkboxIconTemplate || tree._checkboxIconTemplate;\n                                        context: {\n                                            $implicit: isSelected(),\n                                            partialSelected: node.partialSelected,\n                                            class: 'p-tree-node-checkbox'\n                                        }\n                                    \"\n                                ></ng-template>\n                            </ng-template>\n                        </ng-container>\n                    </p-checkbox>\n\n                    <span [class]=\"getIcon()\" *ngIf=\"node.icon || node.expandedIcon || node.collapsedIcon\"></span>\n                    <span class=\"p-tree-node-label\">\n                        <span *ngIf=\"!tree.getTemplateForNode(node)\">{{ node.label }}</span>\n                        <span *ngIf=\"tree.getTemplateForNode(node)\">\n                            <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: { $implicit: node }\"></ng-container>\n                        </span>\n                    </span>\n                </div>\n                <ul class=\"p-tree-node-children\" style=\"display: none;\" *ngIf=\"!tree.virtualScroll && node.children && node.expanded\" [style.display]=\"node.expanded ? 'flex' : 'none'\" role=\"group\">\n                    <p-treeNode\n                        *ngFor=\"let childNode of node.children; let firstChild = first; let lastChild = last; let index = index; trackBy: tree.trackBy.bind(this)\"\n                        [node]=\"childNode\"\n                        [parentNode]=\"node\"\n                        [firstChild]=\"firstChild\"\n                        [lastChild]=\"lastChild\"\n                        [index]=\"index\"\n                        [itemSize]=\"itemSize\"\n                        [level]=\"level + 1\"\n                        [loadingMode]=\"loadingMode\"\n                    ></p-treeNode>\n                </ul>\n            </li>\n\n            <li\n                *ngIf=\"tree.droppableNodes && lastChild\"\n                class=\"p-tree-node-droppoint\"\n                [ngClass]=\"{ 'p-tree-node-droppoint-active': draghoverNext }\"\n                (drop)=\"onDropPoint($event, 1)\"\n                [attr.aria-hidden]=\"true\"\n                (dragover)=\"onDropPointDragOver($event)\"\n                (dragenter)=\"onDropPointDragEnter($event, 1)\"\n                (dragleave)=\"onDropPointDragLeave($event)\"\n            ></li>\n        }\n    `,\n                    encapsulation: ViewEncapsulation.None\n                }]\n        }], propDecorators: { rowNode: [{\n                type: Input\n            }], node: [{\n                type: Input\n            }], parentNode: [{\n                type: Input\n            }], root: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], index: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], firstChild: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], lastChild: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], level: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], indentation: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], itemSize: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], loadingMode: [{\n                type: Input\n            }] } });\n/**\n * Tree is used to display hierarchical data.\n * @group Components\n */\nclass Tree extends BaseComponent {\n    dragDropService;\n    /**\n     * An array of treenodes.\n     * @group Props\n     */\n    value;\n    /**\n     * Defines the selection mode.\n     * @group Props\n     */\n    selectionMode;\n    /**\n     * Loading mode display.\n     * @group Props\n     */\n    loadingMode = 'mask';\n    /**\n     * A single treenode instance or an array to refer to the selections.\n     * @group Props\n     */\n    selection;\n    /**\n     * Inline style of the component.\n     * @group Props\n     */\n    style;\n    /**\n     * Style class of the component.\n     * @group Props\n     */\n    styleClass;\n    /**\n     * Context menu instance.\n     * @group Props\n     */\n    contextMenu;\n    /**\n     * Scope of the draggable nodes to match a droppableScope.\n     * @group Props\n     */\n    draggableScope;\n    /**\n     * Scope of the droppable nodes to match a draggableScope.\n     * @group Props\n     */\n    droppableScope;\n    /**\n     * Whether the nodes are draggable.\n     * @group Props\n     */\n    draggableNodes;\n    /**\n     * Whether the nodes are droppable.\n     * @group Props\n     */\n    droppableNodes;\n    /**\n     * Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically.\n     * @group Props\n     */\n    metaKeySelection = false;\n    /**\n     * Whether checkbox selections propagate to ancestor nodes.\n     * @group Props\n     */\n    propagateSelectionUp = true;\n    /**\n     * Whether checkbox selections propagate to descendant nodes.\n     * @group Props\n     */\n    propagateSelectionDown = true;\n    /**\n     * Displays a loader to indicate data load is in progress.\n     * @group Props\n     */\n    loading;\n    /**\n     * The icon to show while indicating data load is in progress.\n     * @group Props\n     */\n    loadingIcon;\n    /**\n     * Text to display when there is no data.\n     * @group Props\n     */\n    emptyMessage = '';\n    /**\n     * Used to define a string that labels the tree.\n     * @group Props\n     */\n    ariaLabel;\n    /**\n     * Defines a string that labels the toggler icon for accessibility.\n     * @group Props\n     */\n    togglerAriaLabel;\n    /**\n     * Establishes relationships between the component and label(s) where its value should be one or more element IDs.\n     * @group Props\n     */\n    ariaLabelledBy;\n    /**\n     * When enabled, drop can be accepted or rejected based on condition defined at onNodeDrop.\n     * @group Props\n     */\n    validateDrop;\n    /**\n     * When specified, displays an input field to filter the items.\n     * @group Props\n     */\n    filter;\n    /**\n     * Determines whether the filter input should be automatically focused when the component is rendered.\n     * @group Props\n     */\n    filterInputAutoFocus = false;\n    /**\n     * When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.\n     * @group Props\n     */\n    filterBy = 'label';\n    /**\n     * Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient.\n     * @group Props\n     */\n    filterMode = 'lenient';\n    /**\n     * Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient.\n     * @group Props\n     */\n    filterOptions;\n    /**\n     * Placeholder text to show when filter input is empty.\n     * @group Props\n     */\n    filterPlaceholder;\n    /**\n     * Values after the tree nodes are filtered.\n     * @group Props\n     */\n    filteredNodes;\n    /**\n     * Locale to use in filtering. The default locale is the host environment's current locale.\n     * @group Props\n     */\n    filterLocale;\n    /**\n     * Height of the scrollable viewport.\n     * @group Props\n     */\n    scrollHeight;\n    /**\n     * Defines if data is loaded and interacted with in lazy manner.\n     * @group Props\n     */\n    lazy = false;\n    /**\n     * Whether the data should be loaded on demand during scroll.\n     * @group Props\n     */\n    virtualScroll;\n    /**\n     * Height of an item in the list for VirtualScrolling.\n     * @group Props\n     */\n    virtualScrollItemSize;\n    /**\n     * Whether to use the scroller feature. The properties of scroller component can be used like an object in it.\n     * @group Props\n     */\n    virtualScrollOptions;\n    /**\n     * Indentation factor for spacing of the nested node when virtual scrolling is enabled.\n     * @group Props\n     */\n    indentation = 1.5;\n    /**\n     * Custom templates of the component.\n     * @group Props\n     */\n    _templateMap;\n    /**\n     * Function to optimize the node list rendering, default algorithm checks for object identity.\n     * @group Props\n     */\n    trackBy = (index, item) => item;\n    /**\n     * Highlights the node on select.\n     * @group Props\n     */\n    highlightOnSelect = false;\n    /**\n     * Height of the node.\n     * @group Props\n     * @deprecated use virtualScrollItemSize property instead.\n     */\n    _virtualNodeHeight;\n    get virtualNodeHeight() {\n        return this._virtualNodeHeight;\n    }\n    set virtualNodeHeight(val) {\n        this._virtualNodeHeight = val;\n        console.log('The virtualNodeHeight property is deprecated, use virtualScrollItemSize property instead.');\n    }\n    /**\n     * Callback to invoke on selection change.\n     * @param {(TreeNode<any> | TreeNode<any>[] | null)} event - Custom selection change event.\n     * @group Emits\n     */\n    selectionChange = new EventEmitter();\n    /**\n     * Callback to invoke when a node is selected.\n     * @param {TreeNodeSelectEvent} event - Node select event.\n     * @group Emits\n     */\n    onNodeSelect = new EventEmitter();\n    /**\n     * Callback to invoke when a node is unselected.\n     * @param {TreeNodeUnSelectEvent} event - Node unselect event.\n     * @group Emits\n     */\n    onNodeUnselect = new EventEmitter();\n    /**\n     * Callback to invoke when a node is expanded.\n     * @param {TreeNodeExpandEvent} event - Node expand event.\n     * @group Emits\n     */\n    onNodeExpand = new EventEmitter();\n    /**\n     * Callback to invoke when a node is collapsed.\n     * @param {TreeNodeCollapseEvent} event - Node collapse event.\n     * @group Emits\n     */\n    onNodeCollapse = new EventEmitter();\n    /**\n     * Callback to invoke when a node is selected with right click.\n     * @param {onNodeContextMenuSelect} event - Node context menu select event.\n     * @group Emits\n     */\n    onNodeContextMenuSelect = new EventEmitter();\n    /**\n     * Callback to invoke when a node is double clicked.\n     * @param {TreeNodeDoubleClickEvent} event - Node double click event.\n     * @group Emits\n     */\n    onNodeDoubleClick = new EventEmitter();\n    /**\n     * Callback to invoke when a node is dropped.\n     * @param {TreeNodeDropEvent} event - Node drop event.\n     * @group Emits\n     */\n    onNodeDrop = new EventEmitter();\n    /**\n     * Callback to invoke in lazy mode to load new data.\n     * @param {TreeLazyLoadEvent} event - Custom lazy load event.\n     * @group Emits\n     */\n    onLazyLoad = new EventEmitter();\n    /**\n     * Callback to invoke in virtual scroll mode when scroll position changes.\n     * @param {TreeScrollEvent} event - Custom scroll event.\n     * @group Emits\n     */\n    onScroll = new EventEmitter();\n    /**\n     * Callback to invoke in virtual scroll mode when scroll position and item's range in view changes.\n     * @param {TreeScrollIndexChangeEvent} event - Scroll index change event.\n     * @group Emits\n     */\n    onScrollIndexChange = new EventEmitter();\n    /**\n     * Callback to invoke when data is filtered.\n     * @param {TreeFilterEvent} event - Custom filter event.\n     * @group Emits\n     */\n    onFilter = new EventEmitter();\n    /**\n     * Filter template.\n     * @group Templates\n     */\n    filterTemplate;\n    /**\n     * Node template.\n     * @group Templates\n     */\n    nodeTemplate;\n    /**\n     * Header template.\n     * @group Templates\n     */\n    headerTemplate;\n    /**\n     * Footer template.\n     * @group Templates\n     */\n    footerTemplate;\n    /**\n     * Loader template.\n     * @group Templates\n     */\n    loaderTemplate;\n    /**\n     * Empty message template.\n     * @group Templates\n     */\n    emptyMessageTemplate;\n    /**\n     * Toggler icon template.\n     * @group Templates\n     */\n    togglerIconTemplate;\n    /**\n     * Checkbox icon template.\n     * @group Templates\n     */\n    checkboxIconTemplate;\n    /**\n     * Loading icon template.\n     * @group Templates\n     */\n    loadingIconTemplate;\n    /**\n     * Filter icon template.\n     * @group Templates\n     */\n    filterIconTemplate;\n    filterViewChild;\n    scroller;\n    wrapperViewChild;\n    templates;\n    _headerTemplate;\n    _emptyMessageTemplate;\n    _footerTemplate;\n    _loaderTemplate;\n    _togglerIconTemplate;\n    _checkboxIconTemplate;\n    _loadingIconTemplate;\n    _filterIconTemplate;\n    _filterTemplate;\n    ngAfterContentInit() {\n        if (this.templates.length) {\n            this._templateMap = {};\n        }\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'header':\n                    this._headerTemplate = item.template;\n                    break;\n                case 'empty':\n                    this._emptyMessageTemplate = item.template;\n                    break;\n                case 'footer':\n                    this._footerTemplate = item.template;\n                    break;\n                case 'loader':\n                    this._loaderTemplate = item.template;\n                    break;\n                case 'togglericon':\n                    this._togglerIconTemplate = item.template;\n                    break;\n                case 'checkboxicon':\n                    this._checkboxIconTemplate = item.template;\n                    break;\n                case 'loadingicon':\n                    this._loadingIconTemplate = item.template;\n                    break;\n                case 'filtericon':\n                    this._filterIconTemplate = item.template;\n                    break;\n                case 'filter':\n                    this._filterTemplate = item.template;\n                    break;\n                default:\n                    this._templateMap[item.name] = item.template;\n                    break;\n            }\n        });\n    }\n    serializedValue;\n    nodeTouched;\n    dragNodeTree;\n    dragNode;\n    dragNodeSubNodes;\n    dragNodeIndex;\n    dragNodeScope;\n    dragHover;\n    dragStartSubscription;\n    dragStopSubscription;\n    _componentStyle = inject(TreeStyle);\n    constructor(dragDropService) {\n        super();\n        this.dragDropService = dragDropService;\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        if (this.filterBy) {\n            this.filterOptions = {\n                filter: (value) => this._filter(value),\n                reset: () => this.resetFilter()\n            };\n        }\n        if (this.droppableNodes) {\n            this.dragStartSubscription = this.dragDropService.dragStart$.subscribe((event) => {\n                this.dragNodeTree = event.tree;\n                this.dragNode = event.node;\n                this.dragNodeSubNodes = event.subNodes;\n                this.dragNodeIndex = event.index;\n                this.dragNodeScope = event.scope;\n            });\n            this.dragStopSubscription = this.dragDropService.dragStop$.subscribe((event) => {\n                this.dragNodeTree = null;\n                this.dragNode = null;\n                this.dragNodeSubNodes = null;\n                this.dragNodeIndex = null;\n                this.dragNodeScope = null;\n                this.dragHover = false;\n            });\n        }\n    }\n    ngOnChanges(simpleChange) {\n        super.ngOnChanges(simpleChange);\n        if (simpleChange.value) {\n            this.updateSerializedValue();\n            if (this.hasFilterActive()) {\n                this._filter(this.filterViewChild.nativeElement.value);\n            }\n        }\n    }\n    get containerClass() {\n        return this._componentStyle.classes.root({ instance: this });\n    }\n    get emptyMessageLabel() {\n        return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);\n    }\n    updateSerializedValue() {\n        this.serializedValue = [];\n        this.serializeNodes(null, this.getRootNode(), 0, true);\n    }\n    serializeNodes(parent, nodes, level, visible) {\n        if (nodes && nodes.length) {\n            for (let node of nodes) {\n                node.parent = parent;\n                const rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n                if (rowNode.visible && node.expanded) {\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n                }\n            }\n        }\n    }\n    onNodeClick(event, node) {\n        let eventTarget = event.target;\n        if (hasClass(eventTarget, 'p-tree-toggler') || hasClass(eventTarget, 'p-tree-toggler-icon')) {\n            return;\n        }\n        else if (this.selectionMode) {\n            if (node.selectable === false) {\n                node.style = '--p-focus-ring-color: none;';\n                return;\n            }\n            else {\n                if (!node.style?.includes('--p-focus-ring-color')) {\n                    node.style = node.style ? `${node.style}--p-focus-ring-color: var(--primary-color)` : '--p-focus-ring-color: var(--primary-color)';\n                }\n            }\n            if (this.hasFilteredNodes()) {\n                node = this.getNodeWithKey(node.key, this.filteredNodes);\n                if (!node) {\n                    return;\n                }\n            }\n            let index = this.findIndexInSelection(node);\n            let selected = index >= 0;\n            if (this.isCheckboxSelectionMode()) {\n                if (selected) {\n                    if (this.propagateSelectionDown)\n                        this.propagateDown(node, false);\n                    else\n                        this.selection = this.selection.filter((val, i) => i != index);\n                    if (this.propagateSelectionUp && node.parent) {\n                        this.propagateUp(node.parent, false);\n                    }\n                    this.selectionChange.emit(this.selection);\n                    this.onNodeUnselect.emit({ originalEvent: event, node: node });\n                }\n                else {\n                    if (this.propagateSelectionDown)\n                        this.propagateDown(node, true);\n                    else\n                        this.selection = [...(this.selection || []), node];\n                    if (this.propagateSelectionUp && node.parent) {\n                        this.propagateUp(node.parent, true);\n                    }\n                    this.selectionChange.emit(this.selection);\n                    this.onNodeSelect.emit({ originalEvent: event, node: node });\n                }\n            }\n            else {\n                let metaSelection = this.nodeTouched ? false : this.metaKeySelection;\n                if (metaSelection) {\n                    let metaKey = event.metaKey || event.ctrlKey;\n                    if (selected && metaKey) {\n                        if (this.isSingleSelectionMode()) {\n                            this.selectionChange.emit(null);\n                        }\n                        else {\n                            this.selection = this.selection.filter((val, i) => i != index);\n                            this.selectionChange.emit(this.selection);\n                        }\n                        this.onNodeUnselect.emit({ originalEvent: event, node: node });\n                    }\n                    else {\n                        if (this.isSingleSelectionMode()) {\n                            this.selectionChange.emit(node);\n                        }\n                        else if (this.isMultipleSelectionMode()) {\n                            this.selection = !metaKey ? [] : this.selection || [];\n                            this.selection = [...this.selection, node];\n                            this.selectionChange.emit(this.selection);\n                        }\n                        this.onNodeSelect.emit({ originalEvent: event, node: node });\n                    }\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        if (selected) {\n                            this.selection = null;\n                            this.onNodeUnselect.emit({ originalEvent: event, node: node });\n                        }\n                        else {\n                            this.selection = node;\n                            setTimeout(() => {\n                                this.onNodeSelect.emit({ originalEvent: event, node: node });\n                            });\n                        }\n                    }\n                    else {\n                        if (selected) {\n                            this.selection = this.selection.filter((val, i) => i != index);\n                            this.onNodeUnselect.emit({ originalEvent: event, node: node });\n                        }\n                        else {\n                            this.selection = [...(this.selection || []), node];\n                            setTimeout(() => {\n                                this.onNodeSelect.emit({ originalEvent: event, node: node });\n                            });\n                        }\n                    }\n                    this.selectionChange.emit(this.selection);\n                }\n            }\n        }\n        this.nodeTouched = false;\n    }\n    onNodeTouchEnd() {\n        this.nodeTouched = true;\n    }\n    onNodeRightClick(event, node) {\n        if (this.contextMenu) {\n            let eventTarget = event.target;\n            if (eventTarget.className && eventTarget.className.indexOf('p-tree-toggler') === 0) {\n                return;\n            }\n            else {\n                let index = this.findIndexInSelection(node);\n                let selected = index >= 0;\n                if (!selected) {\n                    if (this.isSingleSelectionMode())\n                        this.selectionChange.emit(node);\n                    else\n                        this.selectionChange.emit([node]);\n                }\n                this.contextMenu.show(event);\n                this.onNodeContextMenuSelect.emit({ originalEvent: event, node: node });\n            }\n        }\n    }\n    onNodeDblClick(event, node) {\n        this.onNodeDoubleClick.emit({ originalEvent: event, node: node });\n    }\n    findIndexInSelection(node) {\n        let index = -1;\n        if (this.selectionMode && this.selection) {\n            if (this.isSingleSelectionMode()) {\n                let areNodesEqual = (this.selection.key && this.selection.key === node.key) || this.selection == node;\n                index = areNodesEqual ? 0 : -1;\n            }\n            else {\n                for (let i = 0; i < this.selection.length; i++) {\n                    let selectedNode = this.selection[i];\n                    let areNodesEqual = (selectedNode.key && selectedNode.key === node.key) || selectedNode == node;\n                    if (areNodesEqual) {\n                        index = i;\n                        break;\n                    }\n                }\n            }\n        }\n        return index;\n    }\n    syncNodeOption(node, parentNodes, option, value) {\n        // to synchronize the node option between the filtered nodes and the original nodes(this.value)\n        const _node = this.hasFilteredNodes() ? this.getNodeWithKey(node.key, parentNodes) : null;\n        if (_node) {\n            _node[option] = value || node[option];\n        }\n    }\n    hasFilteredNodes() {\n        return this.filter && this.filteredNodes && this.filteredNodes.length;\n    }\n    hasFilterActive() {\n        return this.filter && this.filterViewChild?.nativeElement?.value.length > 0;\n    }\n    getNodeWithKey(key, nodes) {\n        for (let node of nodes) {\n            if (node.key === key) {\n                return node;\n            }\n            if (node.children) {\n                let matchedNode = this.getNodeWithKey(key, node.children);\n                if (matchedNode) {\n                    return matchedNode;\n                }\n            }\n        }\n    }\n    propagateUp(node, select) {\n        if (node.children && node.children.length) {\n            let selectedCount = 0;\n            let childPartialSelected = false;\n            for (let child of node.children) {\n                if (this.isSelected(child)) {\n                    selectedCount++;\n                }\n                else if (child.partialSelected) {\n                    childPartialSelected = true;\n                }\n            }\n            if (select && selectedCount == node.children.length) {\n                this.selection = [...(this.selection || []), node];\n                node.partialSelected = false;\n            }\n            else {\n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this.selection = this.selection.filter((val, i) => i != index);\n                    }\n                }\n                if (childPartialSelected || (selectedCount > 0 && selectedCount != node.children.length))\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n            this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\n        }\n        let parent = node.parent;\n        if (parent) {\n            this.propagateUp(parent, select);\n        }\n    }\n    propagateDown(node, select) {\n        let index = this.findIndexInSelection(node);\n        if (select && index == -1) {\n            this.selection = [...(this.selection || []), node];\n        }\n        else if (!select && index > -1) {\n            this.selection = this.selection.filter((val, i) => i != index);\n        }\n        node.partialSelected = false;\n        this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\n        if (node.children && node.children.length) {\n            for (let child of node.children) {\n                this.propagateDown(child, select);\n            }\n        }\n    }\n    isSelected(node) {\n        return this.findIndexInSelection(node) != -1;\n    }\n    isSingleSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'single';\n    }\n    isMultipleSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'multiple';\n    }\n    isCheckboxSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'checkbox';\n    }\n    isNodeLeaf(node) {\n        return node.leaf == false ? false : !(node.children && node.children.length);\n    }\n    getRootNode() {\n        return this.filteredNodes ? this.filteredNodes : this.value;\n    }\n    getTemplateForNode(node) {\n        if (this._templateMap)\n            return node.type ? this._templateMap[node.type] : this._templateMap['default'];\n        else\n            return null;\n    }\n    onDragOver(event) {\n        if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n            event.dataTransfer.dropEffect = 'move';\n            event.preventDefault();\n        }\n    }\n    onDrop(event) {\n        if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n            event.preventDefault();\n            let dragNode = this.dragNode;\n            if (this.allowDrop(dragNode, null, this.dragNodeScope)) {\n                let dragNodeIndex = this.dragNodeIndex;\n                this.value = this.value || [];\n                if (this.validateDrop) {\n                    this.onNodeDrop.emit({\n                        originalEvent: event,\n                        dragNode: dragNode,\n                        dropNode: null,\n                        index: dragNodeIndex,\n                        accept: () => {\n                            this.processTreeDrop(dragNode, dragNodeIndex);\n                        }\n                    });\n                }\n                else {\n                    this.onNodeDrop.emit({\n                        originalEvent: event,\n                        dragNode: dragNode,\n                        dropNode: null,\n                        index: dragNodeIndex\n                    });\n                    this.processTreeDrop(dragNode, dragNodeIndex);\n                }\n            }\n        }\n    }\n    processTreeDrop(dragNode, dragNodeIndex) {\n        this.dragNodeSubNodes.splice(dragNodeIndex, 1);\n        this.value.push(dragNode);\n        this.dragDropService.stopDrag({\n            node: dragNode\n        });\n    }\n    onDragEnter() {\n        if (this.droppableNodes && this.allowDrop(this.dragNode, null, this.dragNodeScope)) {\n            this.dragHover = true;\n        }\n    }\n    onDragLeave(event) {\n        if (this.droppableNodes) {\n            let rect = event.currentTarget.getBoundingClientRect();\n            if (event.x > rect.left + rect.width || event.x < rect.left || event.y > rect.top + rect.height || event.y < rect.top) {\n                this.dragHover = false;\n            }\n        }\n    }\n    allowDrop(dragNode, dropNode, dragNodeScope) {\n        if (!dragNode) {\n            //prevent random html elements to be dragged\n            return false;\n        }\n        else if (this.isValidDragScope(dragNodeScope)) {\n            let allow = true;\n            if (dropNode) {\n                if (dragNode === dropNode) {\n                    allow = false;\n                }\n                else {\n                    let parent = dropNode.parent;\n                    while (parent != null) {\n                        if (parent === dragNode) {\n                            allow = false;\n                            break;\n                        }\n                        parent = parent.parent;\n                    }\n                }\n            }\n            return allow;\n        }\n        else {\n            return false;\n        }\n    }\n    isValidDragScope(dragScope) {\n        let dropScope = this.droppableScope;\n        if (dropScope) {\n            if (typeof dropScope === 'string') {\n                if (typeof dragScope === 'string')\n                    return dropScope === dragScope;\n                else if (Array.isArray(dragScope))\n                    return dragScope.indexOf(dropScope) != -1;\n            }\n            else if (Array.isArray(dropScope)) {\n                if (typeof dragScope === 'string') {\n                    return dropScope.indexOf(dragScope) != -1;\n                }\n                else if (Array.isArray(dragScope)) {\n                    for (let s of dropScope) {\n                        for (let ds of dragScope) {\n                            if (s === ds) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    _filter(value) {\n        let filterValue = value;\n        if (filterValue === '') {\n            this.filteredNodes = null;\n        }\n        else {\n            this.filteredNodes = [];\n            const searchFields = this.filterBy.split(',');\n            const filterText = removeAccents(filterValue).toLocaleLowerCase(this.filterLocale);\n            const isStrictMode = this.filterMode === 'strict';\n            for (let node of this.value) {\n                let copyNode = { ...node };\n                let paramsWithoutNode = { searchFields, filterText, isStrictMode };\n                if ((isStrictMode && (this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                    (!isStrictMode && (this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                    this.filteredNodes.push(copyNode);\n                }\n            }\n        }\n        this.updateSerializedValue();\n        this.onFilter.emit({\n            filter: filterValue,\n            filteredValue: this.filteredNodes\n        });\n    }\n    /**\n     * Resets filter.\n     * @group Method\n     */\n    resetFilter() {\n        this.filteredNodes = null;\n        if (this.filterViewChild && this.filterViewChild.nativeElement) {\n            this.filterViewChild.nativeElement.value = '';\n        }\n    }\n    /**\n     * Scrolls to virtual index.\n     * @param {number} number - Index to be scrolled.\n     * @group Method\n     */\n    scrollToVirtualIndex(index) {\n        this.virtualScroll && this.scroller?.scrollToIndex(index);\n    }\n    /**\n     * Scrolls to virtual index.\n     * @param {ScrollToOptions} options - Scroll options.\n     * @group Method\n     */\n    scrollTo(options) {\n        if (this.virtualScroll) {\n            this.scroller?.scrollTo(options);\n        }\n        else if (this.wrapperViewChild && this.wrapperViewChild.nativeElement) {\n            if (this.wrapperViewChild.nativeElement.scrollTo) {\n                this.wrapperViewChild.nativeElement.scrollTo(options);\n            }\n            else {\n                this.wrapperViewChild.nativeElement.scrollLeft = options.left;\n                this.wrapperViewChild.nativeElement.scrollTop = options.top;\n            }\n        }\n    }\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = { ...childNode };\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n            if (matched) {\n                node.expanded = true;\n                return true;\n            }\n        }\n    }\n    isFilterMatched(node, params) {\n        let { searchFields, filterText, isStrictMode } = params;\n        let matched = false;\n        for (let field of searchFields) {\n            let fieldValue = removeAccents(String(resolveFieldData(node, field))).toLocaleLowerCase(this.filterLocale);\n            if (fieldValue.indexOf(filterText) > -1) {\n                matched = true;\n            }\n        }\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, { searchFields, filterText, isStrictMode }) || matched;\n        }\n        return matched;\n    }\n    getIndex(options, index) {\n        const getItemOptions = options['getItemOptions'];\n        return getItemOptions ? getItemOptions(index).index : index;\n    }\n    getBlockableElement() {\n        return this.el.nativeElement.children[0];\n    }\n    ngOnDestroy() {\n        if (this.dragStartSubscription) {\n            this.dragStartSubscription.unsubscribe();\n        }\n        if (this.dragStopSubscription) {\n            this.dragStopSubscription.unsubscribe();\n        }\n        super.ngOnDestroy();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.10\", ngImport: i0, type: Tree, deps: [{ token: i3.TreeDragDropService, optional: true }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.2.10\", type: Tree, isStandalone: true, selector: \"p-tree\", inputs: { value: \"value\", selectionMode: \"selectionMode\", loadingMode: \"loadingMode\", selection: \"selection\", style: \"style\", styleClass: \"styleClass\", contextMenu: \"contextMenu\", draggableScope: \"draggableScope\", droppableScope: \"droppableScope\", draggableNodes: [\"draggableNodes\", \"draggableNodes\", booleanAttribute], droppableNodes: [\"droppableNodes\", \"droppableNodes\", booleanAttribute], metaKeySelection: [\"metaKeySelection\", \"metaKeySelection\", booleanAttribute], propagateSelectionUp: [\"propagateSelectionUp\", \"propagateSelectionUp\", booleanAttribute], propagateSelectionDown: [\"propagateSelectionDown\", \"propagateSelectionDown\", booleanAttribute], loading: [\"loading\", \"loading\", booleanAttribute], loadingIcon: \"loadingIcon\", emptyMessage: \"emptyMessage\", ariaLabel: \"ariaLabel\", togglerAriaLabel: \"togglerAriaLabel\", ariaLabelledBy: \"ariaLabelledBy\", validateDrop: [\"validateDrop\", \"validateDrop\", booleanAttribute], filter: [\"filter\", \"filter\", booleanAttribute], filterInputAutoFocus: [\"filterInputAutoFocus\", \"filterInputAutoFocus\", booleanAttribute], filterBy: \"filterBy\", filterMode: \"filterMode\", filterOptions: \"filterOptions\", filterPlaceholder: \"filterPlaceholder\", filteredNodes: \"filteredNodes\", filterLocale: \"filterLocale\", scrollHeight: \"scrollHeight\", lazy: [\"lazy\", \"lazy\", booleanAttribute], virtualScroll: [\"virtualScroll\", \"virtualScroll\", booleanAttribute], virtualScrollItemSize: [\"virtualScrollItemSize\", \"virtualScrollItemSize\", numberAttribute], virtualScrollOptions: \"virtualScrollOptions\", indentation: [\"indentation\", \"indentation\", numberAttribute], _templateMap: \"_templateMap\", trackBy: \"trackBy\", highlightOnSelect: [\"highlightOnSelect\", \"highlightOnSelect\", booleanAttribute], virtualNodeHeight: \"virtualNodeHeight\" }, outputs: { selectionChange: \"selectionChange\", onNodeSelect: \"onNodeSelect\", onNodeUnselect: \"onNodeUnselect\", onNodeExpand: \"onNodeExpand\", onNodeCollapse: \"onNodeCollapse\", onNodeContextMenuSelect: \"onNodeContextMenuSelect\", onNodeDoubleClick: \"onNodeDoubleClick\", onNodeDrop: \"onNodeDrop\", onLazyLoad: \"onLazyLoad\", onScroll: \"onScroll\", onScrollIndexChange: \"onScrollIndexChange\", onFilter: \"onFilter\" }, providers: [TreeStyle], queries: [{ propertyName: \"filterTemplate\", first: true, predicate: [\"filter\"] }, { propertyName: \"nodeTemplate\", first: true, predicate: [\"node\"] }, { propertyName: \"headerTemplate\", first: true, predicate: [\"header\"] }, { propertyName: \"footerTemplate\", first: true, predicate: [\"footer\"] }, { propertyName: \"loaderTemplate\", first: true, predicate: [\"loader\"] }, { propertyName: \"emptyMessageTemplate\", first: true, predicate: [\"empty\"] }, { propertyName: \"togglerIconTemplate\", first: true, predicate: [\"togglericon\"] }, { propertyName: \"checkboxIconTemplate\", first: true, predicate: [\"checkboxicon\"] }, { propertyName: \"loadingIconTemplate\", first: true, predicate: [\"loadingicon\"] }, { propertyName: \"filterIconTemplate\", first: true, predicate: [\"filtericon\"] }, { propertyName: \"templates\", predicate: PrimeTemplate }], viewQueries: [{ propertyName: \"filterViewChild\", first: true, predicate: [\"filter\"], descendants: true }, { propertyName: \"scroller\", first: true, predicate: [\"scroller\"], descendants: true }, { propertyName: \"wrapperViewChild\", first: true, predicate: [\"wrapper\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\n        <div [ngClass]=\"containerClass\" [ngStyle]=\"style\" [class]=\"styleClass\" (drop)=\"onDrop($event)\" (dragover)=\"onDragOver($event)\" (dragenter)=\"onDragEnter()\" (dragleave)=\"onDragLeave($event)\">\n            <div class=\"p-tree-mask p-overlay-mask\" *ngIf=\"loading && loadingMode === 'mask'\">\n                <i *ngIf=\"loadingIcon\" [class]=\"'p-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n                <ng-container *ngIf=\"!loadingIcon\">\n                    <SpinnerIcon *ngIf=\"!loadingIconTemplate && !_loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-tree-loading-icon'\" />\n                    <span *ngIf=\"loadingIconTemplate || _loadingIconTemplate\" class=\"p-tree-loading-icon\">\n                        <ng-template *ngTemplateOutlet=\"loadingIconTemplate || _loadingIconTemplate\"></ng-template>\n                    </span>\n                </ng-container>\n            </div>\n            <ng-container *ngTemplateOutlet=\"headerTemplate || _headerTemplate\"></ng-container>\n            @if (filterTemplate || _filterTemplate) {\n                <ng-container *ngTemplateOutlet=\"filterTemplate || _filterTemplate; context: { $implicit: filterOptions }\"></ng-container>\n            } @else {\n                <p-iconField *ngIf=\"filter\">\n                    <input\n                        #filter\n                        [pAutoFocus]=\"filterInputAutoFocus\"\n                        pInputText\n                        type=\"search\"\n                        autocomplete=\"off\"\n                        class=\"p-tree-filter-input\"\n                        [attr.placeholder]=\"filterPlaceholder\"\n                        (keydown.enter)=\"$event.preventDefault()\"\n                        (input)=\"_filter($event.target.value)\"\n                    />\n                    <p-inputIcon>\n                        <SearchIcon *ngIf=\"!filterIconTemplate && !_filterIconTemplate\" class=\"p-tree-filter-icon\" />\n                        <span *ngIf=\"filterIconTemplate || _filterIconTemplate\">\n                            <ng-template *ngTemplateOutlet=\"filterIconTemplate || _filterIconTemplate\"></ng-template>\n                        </span>\n                    </p-inputIcon>\n                </p-iconField>\n            }\n\n            <ng-container *ngIf=\"getRootNode()?.length\">\n                <p-scroller\n                    #scroller\n                    *ngIf=\"virtualScroll\"\n                    [items]=\"serializedValue\"\n                    [tabindex]=\"-1\"\n                    styleClass=\"p-tree-root\"\n                    [style]=\"{ height: scrollHeight !== 'flex' ? scrollHeight : undefined }\"\n                    [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\n                    [itemSize]=\"virtualScrollItemSize || _virtualNodeHeight\"\n                    [lazy]=\"lazy\"\n                    (onScroll)=\"onScroll.emit($event)\"\n                    (onScrollIndexChange)=\"onScrollIndexChange.emit($event)\"\n                    (onLazyLoad)=\"onLazyLoad.emit($event)\"\n                    [options]=\"virtualScrollOptions\"\n                >\n                    <ng-template #content let-items let-scrollerOptions=\"options\">\n                        <ul *ngIf=\"items\" class=\"p-tree-root-children\" [ngClass]=\"scrollerOptions.contentStyleClass\" [style]=\"scrollerOptions.contentStyle\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                            <p-treeNode\n                                #treeNode\n                                *ngFor=\"let rowNode of items; let firstChild = first; let lastChild = last; let index = index; trackBy: trackBy\"\n                                [level]=\"rowNode.level\"\n                                [rowNode]=\"rowNode\"\n                                [node]=\"rowNode.node\"\n                                [parentNode]=\"rowNode.parent\"\n                                [firstChild]=\"firstChild\"\n                                [lastChild]=\"lastChild\"\n                                [index]=\"getIndex(scrollerOptions, index)\"\n                                [itemSize]=\"scrollerOptions.itemSize\"\n                                [indentation]=\"indentation\"\n                                [loadingMode]=\"loadingMode\"\n                            ></p-treeNode>\n                        </ul>\n                    </ng-template>\n                    <ng-container *ngIf=\"loaderTemplate || _loaderTemplate\">\n                        <ng-template #loader let-scrollerOptions=\"options\">\n                            <ng-container *ngTemplateOutlet=\"loaderTemplate || _loaderTemplate; context: { options: scrollerOptions }\"></ng-container>\n                        </ng-template>\n                    </ng-container>\n                </p-scroller>\n                <ng-container *ngIf=\"!virtualScroll\">\n                    <div #wrapper class=\"p-tree-root\" [style.max-height]=\"scrollHeight\">\n                        <ul class=\"p-tree-root-children\" *ngIf=\"getRootNode()\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                            <p-treeNode\n                                *ngFor=\"let node of getRootNode(); let firstChild = first; let lastChild = last; let index = index; trackBy: trackBy.bind(this)\"\n                                [node]=\"node\"\n                                [firstChild]=\"firstChild\"\n                                [lastChild]=\"lastChild\"\n                                [index]=\"index\"\n                                [level]=\"0\"\n                                [loadingMode]=\"loadingMode\"\n                            ></p-treeNode>\n                        </ul>\n                    </div>\n                </ng-container>\n            </ng-container>\n\n            <div class=\"p-tree-empty-message\" *ngIf=\"!loading && (getRootNode() == null || getRootNode().length === 0)\">\n                <ng-container *ngIf=\"!emptyMessageTemplate && !_emptyMessageTemplate; else emptyFilter\">\n                    {{ emptyMessageLabel }}\n                </ng-container>\n                <ng-template #emptyFilter *ngTemplateOutlet=\"emptyMessageTemplate || _emptyMessageTemplate\"></ng-template>\n            </div>\n            <ng-container *ngTemplateOutlet=\"footerTemplate || _footerTemplate\"></ng-container>\n        </div>\n    `, isInline: true, dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"component\", type: Scroller, selector: \"p-scroller, p-virtualscroller, p-virtual-scroller, p-virtualScroller\", inputs: [\"id\", \"style\", \"styleClass\", \"tabindex\", \"items\", \"itemSize\", \"scrollHeight\", \"scrollWidth\", \"orientation\", \"step\", \"delay\", \"resizeDelay\", \"appendOnly\", \"inline\", \"lazy\", \"disabled\", \"loaderDisabled\", \"columns\", \"showSpacer\", \"showLoader\", \"numToleratedItems\", \"loading\", \"autoSize\", \"trackBy\", \"options\"], outputs: [\"onLazyLoad\", \"onScroll\", \"onScrollIndexChange\"] }, { kind: \"ngmodule\", type: SharedModule }, { kind: \"component\", type: SearchIcon, selector: \"SearchIcon\" }, { kind: \"component\", type: SpinnerIcon, selector: \"SpinnerIcon\" }, { kind: \"directive\", type: InputText, selector: \"[pInputText]\", inputs: [\"variant\", \"fluid\", \"pSize\"] }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"component\", type: IconField, selector: \"p-iconfield, p-iconField, p-icon-field\", inputs: [\"iconPosition\", \"styleClass\"] }, { kind: \"component\", type: InputIcon, selector: \"p-inputicon, p-inputIcon\", inputs: [\"styleClass\"] }, { kind: \"component\", type: UITreeNode, selector: \"p-treeNode\", inputs: [\"rowNode\", \"node\", \"parentNode\", \"root\", \"index\", \"firstChild\", \"lastChild\", \"level\", \"indentation\", \"itemSize\", \"loadingMode\"] }, { kind: \"ngmodule\", type: AutoFocusModule }, { kind: \"directive\", type: i4.AutoFocus, selector: \"[pAutoFocus]\", inputs: [\"autofocus\", \"pAutoFocus\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.10\", ngImport: i0, type: Tree, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-tree',\n                    standalone: true,\n                    imports: [CommonModule, Scroller, SharedModule, SearchIcon, SpinnerIcon, InputText, FormsModule, IconField, InputIcon, UITreeNode, AutoFocusModule],\n                    template: `\n        <div [ngClass]=\"containerClass\" [ngStyle]=\"style\" [class]=\"styleClass\" (drop)=\"onDrop($event)\" (dragover)=\"onDragOver($event)\" (dragenter)=\"onDragEnter()\" (dragleave)=\"onDragLeave($event)\">\n            <div class=\"p-tree-mask p-overlay-mask\" *ngIf=\"loading && loadingMode === 'mask'\">\n                <i *ngIf=\"loadingIcon\" [class]=\"'p-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n                <ng-container *ngIf=\"!loadingIcon\">\n                    <SpinnerIcon *ngIf=\"!loadingIconTemplate && !_loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-tree-loading-icon'\" />\n                    <span *ngIf=\"loadingIconTemplate || _loadingIconTemplate\" class=\"p-tree-loading-icon\">\n                        <ng-template *ngTemplateOutlet=\"loadingIconTemplate || _loadingIconTemplate\"></ng-template>\n                    </span>\n                </ng-container>\n            </div>\n            <ng-container *ngTemplateOutlet=\"headerTemplate || _headerTemplate\"></ng-container>\n            @if (filterTemplate || _filterTemplate) {\n                <ng-container *ngTemplateOutlet=\"filterTemplate || _filterTemplate; context: { $implicit: filterOptions }\"></ng-container>\n            } @else {\n                <p-iconField *ngIf=\"filter\">\n                    <input\n                        #filter\n                        [pAutoFocus]=\"filterInputAutoFocus\"\n                        pInputText\n                        type=\"search\"\n                        autocomplete=\"off\"\n                        class=\"p-tree-filter-input\"\n                        [attr.placeholder]=\"filterPlaceholder\"\n                        (keydown.enter)=\"$event.preventDefault()\"\n                        (input)=\"_filter($event.target.value)\"\n                    />\n                    <p-inputIcon>\n                        <SearchIcon *ngIf=\"!filterIconTemplate && !_filterIconTemplate\" class=\"p-tree-filter-icon\" />\n                        <span *ngIf=\"filterIconTemplate || _filterIconTemplate\">\n                            <ng-template *ngTemplateOutlet=\"filterIconTemplate || _filterIconTemplate\"></ng-template>\n                        </span>\n                    </p-inputIcon>\n                </p-iconField>\n            }\n\n            <ng-container *ngIf=\"getRootNode()?.length\">\n                <p-scroller\n                    #scroller\n                    *ngIf=\"virtualScroll\"\n                    [items]=\"serializedValue\"\n                    [tabindex]=\"-1\"\n                    styleClass=\"p-tree-root\"\n                    [style]=\"{ height: scrollHeight !== 'flex' ? scrollHeight : undefined }\"\n                    [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\n                    [itemSize]=\"virtualScrollItemSize || _virtualNodeHeight\"\n                    [lazy]=\"lazy\"\n                    (onScroll)=\"onScroll.emit($event)\"\n                    (onScrollIndexChange)=\"onScrollIndexChange.emit($event)\"\n                    (onLazyLoad)=\"onLazyLoad.emit($event)\"\n                    [options]=\"virtualScrollOptions\"\n                >\n                    <ng-template #content let-items let-scrollerOptions=\"options\">\n                        <ul *ngIf=\"items\" class=\"p-tree-root-children\" [ngClass]=\"scrollerOptions.contentStyleClass\" [style]=\"scrollerOptions.contentStyle\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                            <p-treeNode\n                                #treeNode\n                                *ngFor=\"let rowNode of items; let firstChild = first; let lastChild = last; let index = index; trackBy: trackBy\"\n                                [level]=\"rowNode.level\"\n                                [rowNode]=\"rowNode\"\n                                [node]=\"rowNode.node\"\n                                [parentNode]=\"rowNode.parent\"\n                                [firstChild]=\"firstChild\"\n                                [lastChild]=\"lastChild\"\n                                [index]=\"getIndex(scrollerOptions, index)\"\n                                [itemSize]=\"scrollerOptions.itemSize\"\n                                [indentation]=\"indentation\"\n                                [loadingMode]=\"loadingMode\"\n                            ></p-treeNode>\n                        </ul>\n                    </ng-template>\n                    <ng-container *ngIf=\"loaderTemplate || _loaderTemplate\">\n                        <ng-template #loader let-scrollerOptions=\"options\">\n                            <ng-container *ngTemplateOutlet=\"loaderTemplate || _loaderTemplate; context: { options: scrollerOptions }\"></ng-container>\n                        </ng-template>\n                    </ng-container>\n                </p-scroller>\n                <ng-container *ngIf=\"!virtualScroll\">\n                    <div #wrapper class=\"p-tree-root\" [style.max-height]=\"scrollHeight\">\n                        <ul class=\"p-tree-root-children\" *ngIf=\"getRootNode()\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                            <p-treeNode\n                                *ngFor=\"let node of getRootNode(); let firstChild = first; let lastChild = last; let index = index; trackBy: trackBy.bind(this)\"\n                                [node]=\"node\"\n                                [firstChild]=\"firstChild\"\n                                [lastChild]=\"lastChild\"\n                                [index]=\"index\"\n                                [level]=\"0\"\n                                [loadingMode]=\"loadingMode\"\n                            ></p-treeNode>\n                        </ul>\n                    </div>\n                </ng-container>\n            </ng-container>\n\n            <div class=\"p-tree-empty-message\" *ngIf=\"!loading && (getRootNode() == null || getRootNode().length === 0)\">\n                <ng-container *ngIf=\"!emptyMessageTemplate && !_emptyMessageTemplate; else emptyFilter\">\n                    {{ emptyMessageLabel }}\n                </ng-container>\n                <ng-template #emptyFilter *ngTemplateOutlet=\"emptyMessageTemplate || _emptyMessageTemplate\"></ng-template>\n            </div>\n            <ng-container *ngTemplateOutlet=\"footerTemplate || _footerTemplate\"></ng-container>\n        </div>\n    `,\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [TreeStyle]\n                }]\n        }], ctorParameters: () => [{ type: i3.TreeDragDropService, decorators: [{\n                    type: Optional\n                }] }], propDecorators: { value: [{\n                type: Input\n            }], selectionMode: [{\n                type: Input\n            }], loadingMode: [{\n                type: Input\n            }], selection: [{\n                type: Input\n            }], style: [{\n                type: Input\n            }], styleClass: [{\n                type: Input\n            }], contextMenu: [{\n                type: Input\n            }], draggableScope: [{\n                type: Input\n            }], droppableScope: [{\n                type: Input\n            }], draggableNodes: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], droppableNodes: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], metaKeySelection: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], propagateSelectionUp: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], propagateSelectionDown: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], loading: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], loadingIcon: [{\n                type: Input\n            }], emptyMessage: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], togglerAriaLabel: [{\n                type: Input\n            }], ariaLabelledBy: [{\n                type: Input\n            }], validateDrop: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], filter: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], filterInputAutoFocus: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], filterBy: [{\n                type: Input\n            }], filterMode: [{\n                type: Input\n            }], filterOptions: [{\n                type: Input\n            }], filterPlaceholder: [{\n                type: Input\n            }], filteredNodes: [{\n                type: Input\n            }], filterLocale: [{\n                type: Input\n            }], scrollHeight: [{\n                type: Input\n            }], lazy: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], virtualScroll: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], virtualScrollItemSize: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], virtualScrollOptions: [{\n                type: Input\n            }], indentation: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], _templateMap: [{\n                type: Input\n            }], trackBy: [{\n                type: Input\n            }], highlightOnSelect: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], virtualNodeHeight: [{\n                type: Input\n            }], selectionChange: [{\n                type: Output\n            }], onNodeSelect: [{\n                type: Output\n            }], onNodeUnselect: [{\n                type: Output\n            }], onNodeExpand: [{\n                type: Output\n            }], onNodeCollapse: [{\n                type: Output\n            }], onNodeContextMenuSelect: [{\n                type: Output\n            }], onNodeDoubleClick: [{\n                type: Output\n            }], onNodeDrop: [{\n                type: Output\n            }], onLazyLoad: [{\n                type: Output\n            }], onScroll: [{\n                type: Output\n            }], onScrollIndexChange: [{\n                type: Output\n            }], onFilter: [{\n                type: Output\n            }], filterTemplate: [{\n                type: ContentChild,\n                args: ['filter', { descendants: false }]\n            }], nodeTemplate: [{\n                type: ContentChild,\n                args: ['node', { descendants: false }]\n            }], headerTemplate: [{\n                type: ContentChild,\n                args: ['header', { descendants: false }]\n            }], footerTemplate: [{\n                type: ContentChild,\n                args: ['footer', { descendants: false }]\n            }], loaderTemplate: [{\n                type: ContentChild,\n                args: ['loader', { descendants: false }]\n            }], emptyMessageTemplate: [{\n                type: ContentChild,\n                args: ['empty', { descendants: false }]\n            }], togglerIconTemplate: [{\n                type: ContentChild,\n                args: ['togglericon', { descendants: false }]\n            }], checkboxIconTemplate: [{\n                type: ContentChild,\n                args: ['checkboxicon', { descendants: false }]\n            }], loadingIconTemplate: [{\n                type: ContentChild,\n                args: ['loadingicon', { descendants: false }]\n            }], filterIconTemplate: [{\n                type: ContentChild,\n                args: ['filtericon', { descendants: false }]\n            }], filterViewChild: [{\n                type: ViewChild,\n                args: ['filter']\n            }], scroller: [{\n                type: ViewChild,\n                args: ['scroller']\n            }], wrapperViewChild: [{\n                type: ViewChild,\n                args: ['wrapper']\n            }], templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }] } });\nclass TreeModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.10\", ngImport: i0, type: TreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.10\", ngImport: i0, type: TreeModule, imports: [Tree, SharedModule], exports: [Tree, SharedModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.10\", ngImport: i0, type: TreeModule, imports: [Tree, SharedModule, SharedModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.10\", ngImport: i0, type: TreeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [Tree, SharedModule],\n                    exports: [Tree, SharedModule]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Tree, TreeClasses, TreeModule, TreeStyle, UITreeNode };\n"],"mappings":"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ACA;EACIgY,SAAS;EACT;AACJ;AACA;AACA;EACI3S,KAAK;EACL;AACJ;AACA;AACA;EACIC,UAAU;EACV;AACJ;AACA;AACA;EACIgO,WAAW;EACX;AACJ;AACA;AACA;EACIb,cAAc;EACd;AACJ;AACA;AACA;EACIwF,cAAc;EACd;AACJ;AACA;AACA;EACInS,cAAc;EACd;AACJ;AACA;AACA;EACIX,cAAc;EACd;AACJ;AACA;AACA;EACI+S,gBAAgB,GAAG,KAAK;EACxB;AACJ;AACA;AACA;EACIC,oBAAoB,GAAG,IAAI;EAC3B;AACJ;AACA;AACA;EACIC,sBAAsB,GAAG,IAAI;EAC7B;AACJ;AACA;AACA;EACI9a,OAAO;EACP;AACJ;AACA;AACA;EACI+J,WAAW;EACX;AACJ;AACA;AACA;EACIgR,YAAY,GAAG,EAAE;EACjB;AACJ;AACA;AACA;EACIpO,SAAS;EACT;AACJ;AACA;AACA;EACIqO,gBAAgB;EAChB;AACJ;AACA;AACA;EACIpO,cAAc;EACd;AACJ;AACA;AACA;EACIoH,YAAY;EACZ;AACJ;AACA;AACA;EACInI,MAAM;EACN;AACJ;AACA;AACA;EACIH,oBAAoB,GAAG,KAAK;EAC5B;AACJ;AACA;AACA;EACIuP,QAAQ,GAAG,OAAO;EAClB;AACJ;AACA;AACA;EACIC,UAAU,GAAG,SAAS;EACtB;AACJ;AACA;AACA;EACIrQ,aAAa;EACb;AACJ;AACA;AACA;EACIc,iBAAiB;EACjB;AACJ;AACA;AACA;EACIwP,aAAa;EACb;AACJ;AACA;AACA;EACIC,YAAY;EACZ;AACJ;AACA;AACA;EACIvN,YAAY;EACZ;AACJ;AACA;AACA;EACIK,IAAI,GAAG,KAAK;EACZ;AACJ;AACA;AACA;EACIrF,aAAa;EACb;AACJ;AACA;AACA;EACImF,qBAAqB;EACrB;AACJ;AACA;AACA;EACIG,oBAAoB;EACpB;AACJ;AACA;AACA;EACI7F,WAAW,GAAG,GAAG;EACjB;AACJ;AACA;AACA;EACI+S,YAAY;EACZ;AACJ;AACA;AACA;EACI3V,OAAO,GAAGA,CAACN,KAAK,EAAE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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}